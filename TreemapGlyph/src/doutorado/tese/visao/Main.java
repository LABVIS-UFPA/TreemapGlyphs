/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doutorado.tese.visao;

import doutorado.tese.controle.mb.testelaboratorioMB.LogMB;
import doutorado.tese.controle.mb.testelaboratorioMB.TestMB;
import doutorado.tese.dao.ManipuladorArquivo;
import doutorado.tese.modelo.Coluna;
import doutorado.tese.util.Constantes;
import doutorado.tese.controle.negocio.visualizacao.legenda.LegendaVisualizacao;
import doutorado.tese.util.Metadados;
import doutorado.tese.controle.negocio.visualizacao.glyph.factorys.variaveisvisuais.GeometryFactory;
import doutorado.tese.util.Conversor;
import doutorado.tese.util.io.Escritor;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import net.bouthier.treemapAWT.TMView;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author Anderson
 */
public class Main extends javax.swing.JFrame implements PropertyChangeListener {

    private static final Logger logger = LogManager.getLogger(Main.class);

    /**
     * Creates new form Main
     */
    public Main() {
        try {
//            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());//Systema
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");//Systema
//            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());//Metal
//            MetalLookAndFeel.setCurrentTheme(new OceanTheme());
//            UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");//feiao
//            UIManager.setLookAndFeel(new MetalLookAndFeel());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            logger.info(Main.class.getName());//.log(Level.SEVERE, null, ex);
        }
        initComponents();
//        separadorEsqueDir_jSplitPane.setDividerLocation(2000);
        layerPane = new JLayeredPane();
        atributosEscolhidosGlyph = new ArrayList<>();

        legendaVisualizacao = new LegendaVisualizacao(painelLegendaVis.getBounds());
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        separadorEsqueDir_jSplitPane.setOneTouchExpandable(true);
        separadorCimaBaixo.setOneTouchExpandable(true);
        atributo5Glyph.setVisible(false);
        numeroLabelLabel.setVisible(false);
        painelAbas_jTabbedPane.setSelectedIndex(painelAbas_jTabbedPane.getTabCount() - 1);//ultima aba
        logMB = new LogMB();
        nextTest_Button.setVisible(false);
        numMaxTarefas = 3;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoTestesButtonGroup = new javax.swing.ButtonGroup();
        separadorEsqueDir_jSplitPane = new javax.swing.JSplitPane();
        painelEsquerda = new javax.swing.JPanel();
        painelDireita = new javax.swing.JPanel();
        progressoBarra = new javax.swing.JProgressBar();
        separadorCimaBaixo = new javax.swing.JSplitPane();
        legendaBarraRolage = new javax.swing.JScrollPane();
        GridLayout grid = new GridLayout(0, 1);
        painelLegendaVis = new javax.swing.JPanel();
        painelCima = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        painelAbas_jTabbedPane = new javax.swing.JTabbedPane();
        abaTreemap = new javax.swing.JPanel();
        botaoGerarVisualizacao = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        colunasHierarquicasList1 = new javax.swing.JList<>();
        inserirBotao_treemap = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        colunasHierarquicasList2 = new javax.swing.JList<>();
        cimaBotao_treemap = new javax.swing.JButton();
        baixoBotao_treemap = new javax.swing.JButton();
        removerBotao_treemap = new javax.swing.JButton();
        checkLegenda = new javax.swing.JCheckBox();
        legendaComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        tamanhoTreemapComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        corTreemapComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        abaConfigGlyphs = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        varVisuaisList1 = new javax.swing.JList<>();
        inserirVarVisualButton = new javax.swing.JButton();
        removerVarVisualButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        varVisuaisList2 = new javax.swing.JList<>();
        cimaButton = new javax.swing.JButton();
        baixoButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        atributo1Glyph = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        atributo2Glyph = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        atributo3Glyph = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        atributo4Glyph = new javax.swing.JComboBox<>();
        numeroLabelLabel = new javax.swing.JLabel();
        atributo5Glyph = new javax.swing.JComboBox<>();
        botaoGerarGlyphs = new javax.swing.JButton();
        checkLayeredGlyph = new javax.swing.JCheckBox();
        abaStarGlyphs = new javax.swing.JPanel();
        checkStarGlyph = new javax.swing.JCheckBox();
        botaoGerarContinuosGlyphs = new javax.swing.JButton();
        inserirAtributoStarGlyphButton = new javax.swing.JButton();
        removerAtributoStarGlyphButton = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        listaAtributosContinuousGlyph2 = new javax.swing.JList<>();
        cimaAtributoStarGlyphButton = new javax.swing.JButton();
        baixoAtributoStarGlyphButton = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        listaAtributosContinuousGlyph1 = new javax.swing.JList<>();
        glyphContinuosType = new javax.swing.JComboBox<>();
        abaDetalhes = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        colunasDetalhesList1 = new javax.swing.JList<>();
        inserirBotao_detalhes = new javax.swing.JButton();
        removerBotao_detalhes = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        colunasDetalhesList2 = new javax.swing.JList<>();
        jLabel12 = new javax.swing.JLabel();
        updateDetailsButton = new javax.swing.JButton();
        abaFiltros = new javax.swing.JPanel();
        abaTask = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        task_TextPane = new javax.swing.JTextPane();
        nextTest_Button = new javax.swing.JButton();
        saveAnswerButton = new javax.swing.JButton();
        taskCountLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileMenuItem = new javax.swing.JMenuItem();
        decisionTreeMenu = new javax.swing.JMenu();
        decisionTreeActivate = new javax.swing.JCheckBoxMenuItem();
        jMenu1 = new javax.swing.JMenu();
        ambienteA_RadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        ambienteB_RadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        ambienteC_RadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        ambienteD_RadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        ambienteE_RadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();

        grupoTestesButtonGroup.add(ambienteA_RadioButtonMenuItem);
        grupoTestesButtonGroup.add(ambienteB_RadioButtonMenuItem);
        grupoTestesButtonGroup.add(ambienteC_RadioButtonMenuItem);
        grupoTestesButtonGroup.add(ambienteD_RadioButtonMenuItem);
        grupoTestesButtonGroup.add(ambienteE_RadioButtonMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Treemap Glyphs");

        separadorEsqueDir_jSplitPane.setDividerLocation(0.24);
        separadorEsqueDir_jSplitPane.setOpaque(false);
        separadorEsqueDir_jSplitPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                separadorEsqueDir_jSplitPaneComponentHidden(evt);
            }
        });

        painelEsquerda.setBackground(new java.awt.Color(153, 255, 153));
        painelEsquerda.setOpaque(false);

        javax.swing.GroupLayout painelEsquerdaLayout = new javax.swing.GroupLayout(painelEsquerda);
        painelEsquerda.setLayout(painelEsquerdaLayout);
        painelEsquerdaLayout.setHorizontalGroup(
            painelEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 959, Short.MAX_VALUE)
        );
        painelEsquerdaLayout.setVerticalGroup(
            painelEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 695, Short.MAX_VALUE)
        );

        separadorEsqueDir_jSplitPane.setLeftComponent(painelEsquerda);

        painelDireita.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        progressoBarra.setName("teste"); // NOI18N
        progressoBarra.setStringPainted(true);

        separadorCimaBaixo.setDividerLocation(300);
        separadorCimaBaixo.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        legendaBarraRolage.setBackground(new java.awt.Color(255, 255, 255));
        legendaBarraRolage.setBorder(null);

        painelLegendaVis.setLayout(grid);

        legendaBarraRolage.setViewportView(painelLegendaVis);

        separadorCimaBaixo.setRightComponent(legendaBarraRolage);

        javax.swing.GroupLayout painelCimaLayout = new javax.swing.GroupLayout(painelCima);
        painelCima.setLayout(painelCimaLayout);
        painelCimaLayout.setHorizontalGroup(
            painelCimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        painelCimaLayout.setVerticalGroup(
            painelCimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        separadorCimaBaixo.setLeftComponent(painelCima);

        botaoGerarVisualizacao.setText("View Treemap");
        botaoGerarVisualizacao.setEnabled(false);
        botaoGerarVisualizacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarVisualizacaoActionPerformed(evt);
            }
        });

        jLabel2.setText("Group Hierarchy:");

        colunasHierarquicasList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasHierarquicasList1ValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(colunasHierarquicasList1);

        inserirBotao_treemap.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        inserirBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirBotao_treemap.setEnabled(false);
        inserirBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirBotao_treemapActionPerformed(evt);
            }
        });

        colunasHierarquicasList2.setEnabled(false);
        colunasHierarquicasList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasHierarquicasList2ValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(colunasHierarquicasList2);

        cimaBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaUp.png"))); // NOI18N
        cimaBotao_treemap.setEnabled(false);
        cimaBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cimaBotao_treemapActionPerformed(evt);
            }
        });

        baixoBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDown.png"))); // NOI18N
        baixoBotao_treemap.setEnabled(false);
        baixoBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baixoBotao_treemapActionPerformed(evt);
            }
        });

        removerBotao_treemap.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        removerBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerBotao_treemap.setEnabled(false);
        removerBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBotao_treemapActionPerformed(evt);
            }
        });

        checkLegenda.setText("Label:");
        checkLegenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkLegendaActionPerformed(evt);
            }
        });

        legendaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        legendaComboBox.setToolTipText("");
        legendaComboBox.setEnabled(false);

        jLabel1.setText("Size:");

        tamanhoTreemapComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        tamanhoTreemapComboBox.setEnabled(false);

        jLabel4.setText("Color:");

        corTreemapComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        corTreemapComboBox.setEnabled(false);
        corTreemapComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                corTreemapComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Available Attributes:");

        javax.swing.GroupLayout abaTreemapLayout = new javax.swing.GroupLayout(abaTreemap);
        abaTreemap.setLayout(abaTreemapLayout);
        abaTreemapLayout.setHorizontalGroup(
            abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaTreemapLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abaTreemapLayout.createSequentialGroup()
                        .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(abaTreemapLayout.createSequentialGroup()
                                .addComponent(checkLegenda)
                                .addGap(18, 18, 18)
                                .addComponent(legendaComboBox, 0, 163, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, abaTreemapLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addGap(23, 23, 23)
                                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tamanhoTreemapComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(corTreemapComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(97, 97, 97))
                    .addGroup(abaTreemapLayout.createSequentialGroup()
                        .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inserirBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removerBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(abaTreemapLayout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cimaBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(baixoBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2)))
                    .addComponent(botaoGerarVisualizacao, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        abaTreemapLayout.setVerticalGroup(
            abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaTreemapLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(abaTreemapLayout.createSequentialGroup()
                        .addComponent(cimaBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(baixoBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addGroup(abaTreemapLayout.createSequentialGroup()
                        .addComponent(inserirBotao_treemap, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removerBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(legendaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkLegenda))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tamanhoTreemapComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(corTreemapComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoGerarVisualizacao)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        painelAbas_jTabbedPane.addTab("Treemap", abaTreemap);

        jLabel13.setText("Visual variables:");

        varVisuaisList1.setModel(new javax.swing.AbstractListModel<String>() {
            //    String[] strings = { "Texture", "Color", "Shape", "Letter", "Number" };
            String[] strings = { "Texture", "Color", "Shape", "Letter"};
            //    String[] strings = { "Textura", "Cor", "Forma", "Letra"};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        varVisuaisList1.setEnabled(false);
        varVisuaisList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                varVisuaisList1ValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(varVisuaisList1);

        inserirVarVisualButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirVarVisualButton.setEnabled(false);
        inserirVarVisualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirVarVisualButtonActionPerformed(evt);
            }
        });

        removerVarVisualButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerVarVisualButton.setEnabled(false);
        removerVarVisualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerVarVisualButtonActionPerformed(evt);
            }
        });

        jLabel14.setText("Order:");

        varVisuaisList2.setToolTipText("");
        varVisuaisList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                varVisuaisList2ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(varVisuaisList2);

        cimaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaUp.png"))); // NOI18N
        cimaButton.setEnabled(false);
        cimaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cimaButtonActionPerformed(evt);
            }
        });

        baixoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDown.png"))); // NOI18N
        baixoButton.setEnabled(false);
        baixoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baixoButtonActionPerformed(evt);
            }
        });

        jLabel15.setText("Available Attributes:");

        jLabel7.setText("Texture:");

        atributo1Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo1Glyph.setEnabled(false);
        atributo1Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo1GlyphItemStateChanged(evt);
            }
        });
        atributo1Glyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atributo1GlyphActionPerformed(evt);
            }
        });

        jLabel8.setText("Color:");

        atributo2Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo2Glyph.setEnabled(false);
        atributo2Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo2GlyphItemStateChanged(evt);
            }
        });
        atributo2Glyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atributo2GlyphActionPerformed(evt);
            }
        });

        jLabel9.setText("Shape:");

        atributo3Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo3Glyph.setEnabled(false);
        atributo3Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo3GlyphItemStateChanged(evt);
            }
        });
        atributo3Glyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atributo3GlyphActionPerformed(evt);
            }
        });

        jLabel10.setText("Letter:");

        atributo4Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo4Glyph.setEnabled(false);
        atributo4Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo4GlyphItemStateChanged(evt);
            }
        });
        atributo4Glyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atributo4GlyphActionPerformed(evt);
            }
        });

        numeroLabelLabel.setText("Number:");

        atributo5Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo5Glyph.setEnabled(false);
        atributo5Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo5GlyphItemStateChanged(evt);
            }
        });

        botaoGerarGlyphs.setText("View Glyphs");
        botaoGerarGlyphs.setEnabled(false);
        botaoGerarGlyphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarGlyphsActionPerformed(evt);
            }
        });

        checkLayeredGlyph.setText("Layered Glyph");
        checkLayeredGlyph.setToolTipText("");
        checkLayeredGlyph.setEnabled(false);
        checkLayeredGlyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkLayeredGlyphActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout abaConfigGlyphsLayout = new javax.swing.GroupLayout(abaConfigGlyphs);
        abaConfigGlyphs.setLayout(abaConfigGlyphsLayout);
        abaConfigGlyphsLayout.setHorizontalGroup(
            abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                                .addComponent(checkLayeredGlyph, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14)
                        .addGap(180, 180, 180))
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(atributo2Glyph, 0, 96, Short.MAX_VALUE)
                                    .addComponent(atributo1Glyph, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(jLabel9))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaConfigGlyphsLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel10)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(atributo3Glyph, 0, 100, Short.MAX_VALUE)
                                    .addComponent(atributo4Glyph, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jLabel15)
                            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(removerVarVisualButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inserirVarVisualButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cimaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(baixoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(numeroLabelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(atributo5Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoGerarGlyphs, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        abaConfigGlyphsLayout.setVerticalGroup(
            abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addComponent(checkLayeredGlyph)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13))
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removerVarVisualButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaConfigGlyphsLayout.createSequentialGroup()
                            .addComponent(cimaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(baixoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(inserirVarVisualButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(atributo3Glyph)
                            .addComponent(atributo1Glyph)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(atributo4Glyph)))
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(atributo2Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numeroLabelLabel)
                    .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(atributo5Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botaoGerarGlyphs)))
                .addContainerGap())
        );

        painelAbas_jTabbedPane.addTab("Config Glyphs", abaConfigGlyphs);

        checkStarGlyph.setText("Glyph Continuo");
        checkStarGlyph.setEnabled(false);
        checkStarGlyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkStarGlyphActionPerformed(evt);
            }
        });

        botaoGerarContinuosGlyphs.setText("View Glyphs");
        botaoGerarContinuosGlyphs.setEnabled(false);
        botaoGerarContinuosGlyphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarContinuosGlyphsActionPerformed(evt);
            }
        });

        inserirAtributoStarGlyphButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirAtributoStarGlyphButton.setEnabled(false);
        inserirAtributoStarGlyphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirAtributoStarGlyphButtonActionPerformed(evt);
            }
        });

        removerAtributoStarGlyphButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerAtributoStarGlyphButton.setEnabled(false);
        removerAtributoStarGlyphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerAtributoStarGlyphButtonActionPerformed(evt);
            }
        });

        listaAtributosContinuousGlyph2.setToolTipText("");
        listaAtributosContinuousGlyph2.setEnabled(false);
        listaAtributosContinuousGlyph2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaAtributosContinuousGlyph2ValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(listaAtributosContinuousGlyph2);

        cimaAtributoStarGlyphButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaUp.png"))); // NOI18N
        cimaAtributoStarGlyphButton.setEnabled(false);
        cimaAtributoStarGlyphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cimaAtributoStarGlyphButtonActionPerformed(evt);
            }
        });

        baixoAtributoStarGlyphButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDown.png"))); // NOI18N
        baixoAtributoStarGlyphButton.setEnabled(false);
        baixoAtributoStarGlyphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baixoAtributoStarGlyphButtonActionPerformed(evt);
            }
        });

        listaAtributosContinuousGlyph1.setEnabled(false);
        listaAtributosContinuousGlyph1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaAtributosContinuousGlyph1ValueChanged(evt);
            }
        });
        jScrollPane11.setViewportView(listaAtributosContinuousGlyph1);

        glyphContinuosType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"---", "Profile","Star","Pie","Ang" }));
        glyphContinuosType.setEnabled(false);
        glyphContinuosType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                glyphContinuosTypeItemStateChanged(evt);
            }
        });
        glyphContinuosType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                glyphContinuosTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout abaStarGlyphsLayout = new javax.swing.GroupLayout(abaStarGlyphs);
        abaStarGlyphs.setLayout(abaStarGlyphsLayout);
        abaStarGlyphsLayout.setHorizontalGroup(
            abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaStarGlyphsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botaoGerarContinuosGlyphs, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                    .addGroup(abaStarGlyphsLayout.createSequentialGroup()
                        .addGroup(abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(abaStarGlyphsLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(checkStarGlyph, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(abaStarGlyphsLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(glyphContinuosType, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(78, 78, 78))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaStarGlyphsLayout.createSequentialGroup()
                                .addGroup(abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inserirAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(removerAtributoStarGlyphButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addGroup(abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cimaAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(baixoAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(51, 51, 51))
        );
        abaStarGlyphsLayout.setVerticalGroup(
            abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaStarGlyphsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkStarGlyph, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(glyphContinuosType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(abaStarGlyphsLayout.createSequentialGroup()
                        .addComponent(cimaAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(baixoAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(abaStarGlyphsLayout.createSequentialGroup()
                            .addComponent(inserirAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(removerAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoGerarContinuosGlyphs)
                .addContainerGap(140, Short.MAX_VALUE))
        );

        painelAbas_jTabbedPane.addTab("Glyph Continuo", abaStarGlyphs);

        jLabel6.setText("Available Attributes:");

        colunasDetalhesList1.setEnabled(false);
        colunasDetalhesList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasDetalhesList1ValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(colunasDetalhesList1);

        inserirBotao_detalhes.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        inserirBotao_detalhes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirBotao_detalhes.setEnabled(false);
        inserirBotao_detalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirBotao_detalhesActionPerformed(evt);
            }
        });

        removerBotao_detalhes.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        removerBotao_detalhes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerBotao_detalhes.setEnabled(false);
        removerBotao_detalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBotao_detalhesActionPerformed(evt);
            }
        });

        colunasDetalhesList2.setEnabled(false);
        colunasDetalhesList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasDetalhesList2ValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(colunasDetalhesList2);

        jLabel12.setText("Details on Demand:");

        updateDetailsButton.setText("Update Details");
        updateDetailsButton.setEnabled(false);
        updateDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDetailsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout abaDetalhesLayout = new javax.swing.GroupLayout(abaDetalhes);
        abaDetalhes.setLayout(abaDetalhesLayout);
        abaDetalhesLayout.setHorizontalGroup(
            abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaDetalhesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(updateDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(abaDetalhesLayout.createSequentialGroup()
                        .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inserirBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removerBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        abaDetalhesLayout.setVerticalGroup(
            abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaDetalhesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(abaDetalhesLayout.createSequentialGroup()
                        .addComponent(inserirBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removerBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5)
                    .addComponent(jScrollPane6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateDetailsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelAbas_jTabbedPane.addTab("Details", abaDetalhes);

        javax.swing.GroupLayout abaFiltrosLayout = new javax.swing.GroupLayout(abaFiltros);
        abaFiltros.setLayout(abaFiltrosLayout);
        abaFiltrosLayout.setHorizontalGroup(
            abaFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 384, Short.MAX_VALUE)
        );
        abaFiltrosLayout.setVerticalGroup(
            abaFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 282, Short.MAX_VALUE)
        );

        painelAbas_jTabbedPane.addTab("Filter", abaFiltros);

        task_TextPane.setEditable(false);
        task_TextPane.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jScrollPane10.setViewportView(task_TextPane);

        nextTest_Button.setText("Next");
        nextTest_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextTest_ButtonActionPerformed(evt);
            }
        });

        saveAnswerButton.setText("Submit answer");
        saveAnswerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAnswerButtonActionPerformed(evt);
            }
        });

        taskCountLabel.setText("Task:");

        javax.swing.GroupLayout abaTaskLayout = new javax.swing.GroupLayout(abaTask);
        abaTask.setLayout(abaTaskLayout);
        abaTaskLayout.setHorizontalGroup(
            abaTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaTaskLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(abaTaskLayout.createSequentialGroup()
                        .addComponent(saveAnswerButton)
                        .addGap(18, 18, 18)
                        .addComponent(taskCountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(nextTest_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        abaTaskLayout.setVerticalGroup(
            abaTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaTaskLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(taskCountLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(abaTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nextTest_Button)
                        .addComponent(saveAnswerButton)))
                .addGap(36, 36, 36))
        );

        painelAbas_jTabbedPane.addTab("Task", abaTask);

        jScrollPane8.setViewportView(painelAbas_jTabbedPane);

        separadorCimaBaixo.setTopComponent(jScrollPane8);

        javax.swing.GroupLayout painelDireitaLayout = new javax.swing.GroupLayout(painelDireita);
        painelDireita.setLayout(painelDireitaLayout);
        painelDireitaLayout.setHorizontalGroup(
            painelDireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelDireitaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressoBarra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(separadorCimaBaixo)
        );
        painelDireitaLayout.setVerticalGroup(
            painelDireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDireitaLayout.createSequentialGroup()
                .addComponent(progressoBarra, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separadorCimaBaixo, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE))
        );

        separadorEsqueDir_jSplitPane.setRightComponent(painelDireita);

        fileMenu.setText("File");

        fileMenuItem.setText("File");
        fileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuItem);

        jMenuBar1.add(fileMenu);

        decisionTreeMenu.setText("Adaptative Glyph");
        decisionTreeMenu.setToolTipText("");

        decisionTreeActivate.setText("Activate");
        decisionTreeActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decisionTreeActivateActionPerformed(evt);
            }
        });
        decisionTreeMenu.add(decisionTreeActivate);

        jMenuBar1.add(decisionTreeMenu);

        jMenu1.setText("Test");

        ambienteA_RadioButtonMenuItem.setText("Environment A");
        ambienteA_RadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ambienteA_RadioButtonMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(ambienteA_RadioButtonMenuItem);

        ambienteB_RadioButtonMenuItem.setText("Environment B");
        ambienteB_RadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ambienteB_RadioButtonMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(ambienteB_RadioButtonMenuItem);

        ambienteC_RadioButtonMenuItem.setText("Environment C");
        ambienteC_RadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ambienteC_RadioButtonMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(ambienteC_RadioButtonMenuItem);

        ambienteD_RadioButtonMenuItem.setText("Environment D");
        ambienteD_RadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ambienteD_RadioButtonMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(ambienteD_RadioButtonMenuItem);

        ambienteE_RadioButtonMenuItem.setText("Environment E");
        ambienteE_RadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ambienteE_RadioButtonMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(ambienteE_RadioButtonMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(separadorEsqueDir_jSplitPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(separadorEsqueDir_jSplitPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String[] parseListModelString2Array(ListModel<String> lista) {
        String[] convertida = new String[lista.getSize()];
        for (int i = 0; i < convertida.length; i++) {
            convertida[i] = lista.getElementAt(i);
        }
        return convertida;
    }

//    public String[] parseListString2Array(ListModel<String> lista) {
//        String[] convertida = new String[lista.getSize()];
//        for (int i = 0; i < convertida.length; i++) {
//            convertida[i] = lista.getElementAt(i);
//        }
//        return convertida;
//    }

    private void fileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "TXT & CSV Files", "txt", "csv");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            limparResquiciosBasesAnteriores();
            checkLayeredGlyph.setEnabled(false);
            checkStarGlyph.setEnabled(false);
            selectedFile = chooser.getSelectedFile();
            progressoBarra.setVisible(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            logger.info("Arquivo selecionado: " + selectedFile);
            //Instances of javax.swing.SwingWorker are not reusuable, so
            //we create new instances as needed.
            task = new Task();
            task.addPropertyChangeListener(this);
            task.execute();
        } else {
            JOptionPane.showMessageDialog(null, "The file type can not be read.", "Erro!", JOptionPane.ERROR_MESSAGE);
            logger.error("The file type can not be read. - Did it again!");
        }
    }//GEN-LAST:event_fileMenuItemActionPerformed

    private void atributo4GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo4GlyphItemStateChanged
        botaoGerarGlyphs.setEnabled(true);
    }//GEN-LAST:event_atributo4GlyphItemStateChanged

    private void atributo3GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo3GlyphItemStateChanged
        botaoGerarGlyphs.setEnabled(true);
    }//GEN-LAST:event_atributo3GlyphItemStateChanged

    private void atributo2GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo2GlyphItemStateChanged
        botaoGerarGlyphs.setEnabled(true);
    }//GEN-LAST:event_atributo2GlyphItemStateChanged

    private void atributo1GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo1GlyphItemStateChanged
        botaoGerarGlyphs.setEnabled(true);
    }//GEN-LAST:event_atributo1GlyphItemStateChanged

    private void botaoGerarGlyphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarGlyphsActionPerformed
        //acoes para configurar os glyphs

        variaveisVisuaisEscolhidas = parseListModelString2Array(varVisuaisList2.getModel());
        glyphPanel.setManipulador(manipulador);
        glyphPanel.setVariaveisVisuaisEscolhidas(variaveisVisuaisEscolhidas);
//        glyphPanel.setTipoGlyphContinuoEscolhido(atributosEscolhidosStarGlyph);
        //Acoes para desenhar os glyphs
        glyphPanel.setBounds(painelEsquerda.getBounds());
        glyphPanel.setUseDecisionTree(decisionTreeActivate.isSelected());
        atributosEscolhidosGlyph = getAtributosEscolhidosGlyph();
        glyphPanel.setAtributosEscolhidos(atributosEscolhidosGlyph);
        glyphPanel.setVisible(true);
        glyphPanel.repaint();

        atualizarLegendaGlyphs(atributosEscolhidosGlyph);
    }//GEN-LAST:event_botaoGerarGlyphsActionPerformed
    private void checkLayeredGlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkLayeredGlyphActionPerformed
        if (checkLayeredGlyph.isSelected()) {
            Constantes.setShowGlyph(true);
            glyphPanel = new GlassPanel();
            glyphPanel.setTMView(view);

            varVisuaisList1.setEnabled(true);

            layerPane.add(glyphPanel, new Integer(1), 0);
        } else {
            limparCacheGlyphs();
        }
    }//GEN-LAST:event_checkLayeredGlyphActionPerformed

    private void checkLegendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkLegendaActionPerformed
        if (checkLegenda.isSelected()) {
            Constantes.setShowLegenda(true);
            legendaComboBox.setEnabled(true);
        } else {
            Constantes.setShowLegenda(false);
            legendaComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_checkLegendaActionPerformed

    private void removerBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBotao_treemapActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < colunasHierarquicasList1.getModel().getSize(); i++) {
            String elementAt = colunasHierarquicasList1.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(colunasHierarquicasList2.getSelectedValuesList());
        atributos.sort(null);
        reloadListGUI(atributos.toArray(), colunasHierarquicasList1);

        //remover o conteudo da lista de colunasHierarquicasList2 treemap
        ListModel<String> modelGlyphs = colunasHierarquicasList2.getModel();
        List<String> selectedValuesList = colunasHierarquicasList2.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        reloadListGUI(newListaAtribTreemap.toArray(), colunasHierarquicasList2);

        if (colunasHierarquicasList2.getModel().getSize() == 0) {
            colunasHierarquicasList2.setEnabled(false);
        }
    }//GEN-LAST:event_removerBotao_treemapActionPerformed

    private void baixoBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baixoBotao_treemapActionPerformed
        List<String> novaLista = new ArrayList<>(colunasHierarquicasList2.getModel().getSize());
        for (int i = 0; i < colunasHierarquicasList2.getModel().getSize(); i++) {
            novaLista.add(colunasHierarquicasList2.getModel().getElementAt(i));
        }
        int[] selectedValuesList = colunasHierarquicasList2.getSelectedIndices();
        for (int i = 0; i < novaLista.size(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    String caraFrente = novaLista.get(i + 1);
                    String caraAtual = novaLista.get(i);
                    novaLista.add(i + 1, caraAtual);
                    novaLista.add(i, caraFrente);
                    novaLista.remove(i + 2);
                    novaLista.remove(i + 2);
                    break;
                }
            }
        }
        reloadListGUI(novaLista.toArray(), colunasHierarquicasList2);
    }//GEN-LAST:event_baixoBotao_treemapActionPerformed

    private void cimaBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cimaBotao_treemapActionPerformed
        List<String> novaLista = new ArrayList<>();
        int[] selectedValuesList = colunasHierarquicasList2.getSelectedIndices();
        for (int i = 0; i < colunasHierarquicasList2.getModel().getSize(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    novaLista.add(i - 1, colunasHierarquicasList2.getModel().getElementAt(i));
                } else {
                    novaLista.add(colunasHierarquicasList2.getModel().getElementAt(i));
                }
            }
        }
        reloadListGUI(novaLista.toArray(), colunasHierarquicasList2);
    }//GEN-LAST:event_cimaBotao_treemapActionPerformed

    private void colunasHierarquicasList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasHierarquicasList2ValueChanged
        if (colunasHierarquicasList2.getSelectedValuesList().size() >= 1) {
            removerBotao_treemap.setEnabled(true);
            if (colunasHierarquicasList2.getSelectedIndex() > 0) {
                cimaBotao_treemap.setEnabled(true);
            } else {
                cimaBotao_treemap.setEnabled(false);
            }
            if (colunasHierarquicasList2.getSelectedIndex() < colunasHierarquicasList2.getModel().getSize() - 1) {
                baixoBotao_treemap.setEnabled(true);
            } else {
                baixoBotao_treemap.setEnabled(false);
            }
        } else {
            removerBotao_treemap.setEnabled(false);
            cimaBotao_treemap.setEnabled(false);
            baixoBotao_treemap.setEnabled(false);
        }
    }//GEN-LAST:event_colunasHierarquicasList2ValueChanged

    private void inserirBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirBotao_treemapActionPerformed
        List<Object> newListaVarVisuais = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < colunasHierarquicasList2.getModel().getSize(); i++) {
            String elementAt = colunasHierarquicasList2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(colunasHierarquicasList1.getSelectedValuesList());
        reloadListGUI(atributosEscolhidos.toArray(), colunasHierarquicasList2);
        colunasHierarquicasList2.setEnabled(true);

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = colunasHierarquicasList1.getModel();
        List<String> selectedValuesList = colunasHierarquicasList1.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaVarVisuais.add(modelOriginal.getElementAt(i));
            }
        }
        reloadListGUI(newListaVarVisuais.toArray(), colunasHierarquicasList1);
    }//GEN-LAST:event_inserirBotao_treemapActionPerformed

    private void colunasHierarquicasList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasHierarquicasList1ValueChanged
        if (colunasHierarquicasList1.getSelectedValuesList().size() >= 1) {
            inserirBotao_treemap.setEnabled(true);
        } else {
            inserirBotao_treemap.setEnabled(false);
        }
    }//GEN-LAST:event_colunasHierarquicasList1ValueChanged

    private void botaoGerarVisualizacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarVisualizacaoActionPerformed
        limparPainelEsquerda();
        itemTamanho = tamanhoTreemapComboBox.getSelectedItem().toString();
        itemLegenda = legendaComboBox.getSelectedItem().toString();
        itemCor = corTreemapComboBox.getSelectedItem().toString();
        String[] itensHierarquia = Conversor.parseListModel2ArrayString(colunasHierarquicasList2.getModel());
        String[] itensDetalhes = Conversor.parseListModel2ArrayString(colunasDetalhesList2.getModel());

        visualizationTreemap = new VisualizationsArea(painelEsquerda.getWidth(), painelEsquerda.getHeight(),
                manipulador, itemTamanho, itensHierarquia, itemLegenda, itemCor, itensDetalhes, () -> {
                });

        painelEsquerda.add(layerPane);
        view = visualizationTreemap.getView();
        layerPane.setBounds(view.getBounds());
        layerPane.add(view, new Integer(0), 0);

        progressoBarra.setVisible(false);
        atualizarLegendaTreemap(itemCor);
        checkLayeredGlyph.setEnabled(true);
        checkStarGlyph.setEnabled(true);

        limparCacheGlyphs();

        clickPanel = new GlassPanelClick();
        clickPanel.setTMView(view);
        clickPanel.setListaItnsClicados(visualizationTreemap.getListClick());
        clickPanel.setBounds(view.getBounds());
        layerPane.add(clickPanel, new Integer(2), 0);

        clickPanel.setOnClickListener(new GlassPanelClick.OnClick() {
            @Override
            public void clicou(MouseEvent evt) {
                view.dispatchEvent(evt);
            }
        });
//        layerPane.add(view, new Integer(0), 1);

        layerPane.moveToFront(clickPanel);
        clickPanel.repaint();
    }//GEN-LAST:event_botaoGerarVisualizacaoActionPerformed

    private void colunasDetalhesList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasDetalhesList1ValueChanged
        if (colunasDetalhesList1.getSelectedValuesList().size() >= 1) {
            inserirBotao_detalhes.setEnabled(true);
        } else {
            inserirBotao_detalhes.setEnabled(false);
        }
    }//GEN-LAST:event_colunasDetalhesList1ValueChanged

    private void inserirBotao_detalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirBotao_detalhesActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < colunasDetalhesList2.getModel().getSize(); i++) {
            String elementAt = colunasDetalhesList2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(colunasDetalhesList1.getSelectedValuesList());
        atributosEscolhidos.sort(null);
        reloadListGUI(atributosEscolhidos.toArray(), colunasDetalhesList2);
        colunasDetalhesList2.setEnabled(true);
//        botaoGerarVisualizacao.setEnabled(true);

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = colunasDetalhesList1.getModel();
        List<String> selectedValuesList = colunasDetalhesList1.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaAtribTreemap.add(modelOriginal.getElementAt(i));
            }
        }
        loadItensDetalhes(newListaAtribTreemap.toArray());
        updateDetailsButton.setEnabled(true);
    }//GEN-LAST:event_inserirBotao_detalhesActionPerformed

    private void removerBotao_detalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBotao_detalhesActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < colunasDetalhesList1.getModel().getSize(); i++) {
            String elementAt = colunasDetalhesList1.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(colunasDetalhesList2.getSelectedValuesList());
        atributos.sort(null);
        loadItensDetalhes(atributos.toArray());

        //remover o conteudo da lista de hierarquia treemap
        ListModel<String> modelGlyphs = colunasDetalhesList2.getModel();
        List<String> selectedValuesList = colunasDetalhesList2.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        reloadListGUI(newListaAtribTreemap.toArray(), colunasDetalhesList2);

        if (colunasDetalhesList2.getModel().getSize() == 0) {
            colunasDetalhesList2.setEnabled(false);
        }
    }//GEN-LAST:event_removerBotao_detalhesActionPerformed

    private void colunasDetalhesList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasDetalhesList2ValueChanged
        if (colunasDetalhesList2.getSelectedValuesList().size() >= 1) {
            removerBotao_detalhes.setEnabled(true);
        } else {
            removerBotao_detalhes.setEnabled(false);
        }
    }//GEN-LAST:event_colunasDetalhesList2ValueChanged

    private void updateDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDetailsButtonActionPerformed
        String[] valoresEscolhidos = Conversor.parseListModel2ArrayString(colunasDetalhesList2.getModel());
        visualizationTreemap.setColunasDetalhesDemanda(valoresEscolhidos);
        visualizationTreemap.updateDetalhesDemanda();

        botaoGerarVisualizacaoActionPerformed(evt);
    }//GEN-LAST:event_updateDetailsButtonActionPerformed

    private void decisionTreeActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decisionTreeActivateActionPerformed
        botaoGerarGlyphsActionPerformed(evt);
        if (decisionTreeActivate.isSelected()) {
            logger.info("Árvore de decisão avivada");
        }
    }//GEN-LAST:event_decisionTreeActivateActionPerformed

    private void varVisuaisList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_varVisuaisList1ValueChanged
        if (varVisuaisList1.getSelectedValuesList().size() >= 1) {
            inserirVarVisualButton.setEnabled(true);
        } else {
            inserirVarVisualButton.setEnabled(false);
        }
    }//GEN-LAST:event_varVisuaisList1ValueChanged

    private void inserirVarVisualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirVarVisualButtonActionPerformed
        List<Object> newListaVarVisuais = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < varVisuaisList2.getModel().getSize(); i++) {
            String elementAt = varVisuaisList2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(varVisuaisList1.getSelectedValuesList());
//        atributosEscolhidos.sort(null);
        reloadListGUI(atributosEscolhidos.toArray(), varVisuaisList2);
        varVisuaisList2.setEnabled(true);
//        botaoConfiVarVisuais.setEnabled(true);
        habilitarVarVisuaisUtilizadasGUI(varVisuaisList1.getSelectedValuesList());

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = varVisuaisList1.getModel();
        List<String> selectedValuesList = varVisuaisList1.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaVarVisuais.add(modelOriginal.getElementAt(i));
            }
        }
        reloadListGUI(newListaVarVisuais.toArray(), varVisuaisList1);
        //loadVarVisuais(newListaVarVisuais.toArray());
    }//GEN-LAST:event_inserirVarVisualButtonActionPerformed

    private void removerVarVisualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerVarVisualButtonActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < varVisuaisList1.getModel().getSize(); i++) {
            String elementAt = varVisuaisList1.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(varVisuaisList2.getSelectedValuesList());
//        atributos.sort(null);
        loadVarVisuais(atributos.toArray());
        desabilitarVarVisuaisUtilizadasGUI(varVisuaisList2.getSelectedValuesList());

        //remover o conteudo da lista de hierarquia treemap
        ListModel<String> modelGlyphs = varVisuaisList2.getModel();
        List<String> selectedValuesList = varVisuaisList2.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        reloadListGUI(newListaAtribTreemap.toArray(), varVisuaisList2);

        if (varVisuaisList2.getModel().getSize() == 0) {
            varVisuaisList2.setEnabled(false);
        }
    }//GEN-LAST:event_removerVarVisualButtonActionPerformed

    private void varVisuaisList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_varVisuaisList2ValueChanged
        if (varVisuaisList2.getSelectedValuesList().size() >= 1) {
            removerVarVisualButton.setEnabled(true);
            if (varVisuaisList2.getSelectedIndex() > 0) {
                cimaButton.setEnabled(true);
            } else {
                cimaButton.setEnabled(false);
            }
            if (varVisuaisList2.getSelectedIndex() < varVisuaisList2.getModel().getSize() - 1) {
                baixoButton.setEnabled(true);
            } else {
                baixoButton.setEnabled(false);
            }
        } else {
            removerVarVisualButton.setEnabled(false);
            cimaButton.setEnabled(false);
            baixoButton.setEnabled(false);
        }
        if (varVisuaisList2.getModel().getSize() < 1) {
            botaoGerarGlyphs.setEnabled(false);
        }
    }//GEN-LAST:event_varVisuaisList2ValueChanged

    private void cimaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cimaButtonActionPerformed
        List<String> novaLista = new ArrayList<>();
        int[] selectedValuesList = varVisuaisList2.getSelectedIndices();
        for (int i = 0; i < varVisuaisList2.getModel().getSize(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    novaLista.add(i - 1, varVisuaisList2.getModel().getElementAt(i));
                } else {
                    novaLista.add(varVisuaisList2.getModel().getElementAt(i));
                }
            }
        }
        reloadListGUI(novaLista.toArray(), varVisuaisList2);
    }//GEN-LAST:event_cimaButtonActionPerformed

    private void baixoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baixoButtonActionPerformed
        List<String> novaLista = new ArrayList<>(varVisuaisList2.getModel().getSize());
        for (int i = 0; i < varVisuaisList2.getModel().getSize(); i++) {
            novaLista.add(varVisuaisList2.getModel().getElementAt(i));
        }
        int[] selectedValuesList = varVisuaisList2.getSelectedIndices();
        for (int i = 0; i < novaLista.size(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    String caraFrente = novaLista.get(i + 1);
                    String caraAtual = novaLista.get(i);
                    novaLista.add(i + 1, caraAtual);
                    novaLista.add(i, caraFrente);
                    novaLista.remove(i + 2);
                    novaLista.remove(i + 2);
                    break;
                }
            }
        }
        reloadListGUI(novaLista.toArray(), varVisuaisList2);
    }//GEN-LAST:event_baixoButtonActionPerformed

    private void atributo5GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo5GlyphItemStateChanged
        botaoGerarGlyphs.setEnabled(true);

    }//GEN-LAST:event_atributo5GlyphItemStateChanged

    private void atributo1GlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atributo1GlyphActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo1GlyphActionPerformed

    private void atributo3GlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atributo3GlyphActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo3GlyphActionPerformed

    private void corTreemapComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_corTreemapComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_corTreemapComboBoxActionPerformed

    private void checkStarGlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkStarGlyphActionPerformed
        if (checkStarGlyph.isSelected()) {
            Constantes.setShowGlyph(true);
            glyphContinuosType.setEnabled(true);
            if (glyphPanel == null) {
                glyphPanel = new GlassPanel();
                glyphPanel.setTMView(view);

                layerPane.add(glyphPanel, new Integer(1), 0);
            }
            listaAtributosContinuousGlyph1.setEnabled(true);
        } else {
            limparCacheGlyphs();
        }
    }//GEN-LAST:event_checkStarGlyphActionPerformed

    private void removerAtributoStarGlyphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerAtributoStarGlyphButtonActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < listaAtributosContinuousGlyph1.getModel().getSize(); i++) {
            String elementAt = listaAtributosContinuousGlyph1.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(listaAtributosContinuousGlyph2.getSelectedValuesList());
        atributos.sort(null);
        reloadListGUI(atributos.toArray(), listaAtributosContinuousGlyph1);

        //remover o conteudo da lista de hierarquia treemap
        ListModel<String> modelGlyphs = listaAtributosContinuousGlyph2.getModel();
        List<String> selectedValuesList = listaAtributosContinuousGlyph2.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        reloadListGUI(newListaAtribTreemap.toArray(), listaAtributosContinuousGlyph2);

        if (listaAtributosContinuousGlyph2.getModel().getSize() == 0) {
            listaAtributosContinuousGlyph2.setEnabled(false);
            botaoGerarContinuosGlyphs.setEnabled(false);
        } else {
            botaoGerarContinuosGlyphs.setEnabled(true);
        }
    }//GEN-LAST:event_removerAtributoStarGlyphButtonActionPerformed

    private void inserirAtributoStarGlyphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirAtributoStarGlyphButtonActionPerformed
        List<Object> newListaVarVisuais = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < listaAtributosContinuousGlyph2.getModel().getSize(); i++) {
            String elementAt = listaAtributosContinuousGlyph2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(listaAtributosContinuousGlyph1.getSelectedValuesList());
        reloadListGUI(atributosEscolhidos.toArray(), listaAtributosContinuousGlyph2);
        listaAtributosContinuousGlyph2.setEnabled(true);

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = listaAtributosContinuousGlyph1.getModel();
        List<String> selectedValuesList = listaAtributosContinuousGlyph1.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaVarVisuais.add(modelOriginal.getElementAt(i));
            }
        }
        reloadListGUI(newListaVarVisuais.toArray(), listaAtributosContinuousGlyph1);
        botaoGerarContinuosGlyphs.setEnabled(true);
    }//GEN-LAST:event_inserirAtributoStarGlyphButtonActionPerformed

    private void listaAtributosContinuousGlyph2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaAtributosContinuousGlyph2ValueChanged
        if (listaAtributosContinuousGlyph2.getSelectedValuesList().size() >= 1) {
            removerAtributoStarGlyphButton.setEnabled(true);
            if (listaAtributosContinuousGlyph2.getSelectedIndex() > 0) {
                cimaAtributoStarGlyphButton.setEnabled(true);
            } else {
                cimaAtributoStarGlyphButton.setEnabled(false);
            }
            if (listaAtributosContinuousGlyph2.getSelectedIndex() < listaAtributosContinuousGlyph2.getModel().getSize() - 1) {
                baixoAtributoStarGlyphButton.setEnabled(true);
            } else {
                baixoAtributoStarGlyphButton.setEnabled(false);
            }
        } else {
            removerAtributoStarGlyphButton.setEnabled(false);
            cimaAtributoStarGlyphButton.setEnabled(false);
            baixoAtributoStarGlyphButton.setEnabled(false);
        }
    }//GEN-LAST:event_listaAtributosContinuousGlyph2ValueChanged

    private void botaoGerarContinuosGlyphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarContinuosGlyphsActionPerformed
        glyphPanel.setManipulador(manipulador);
        glyphPanel.setContinuousGlyphActivated(checkStarGlyph.isSelected());

        glyphPanel.setTipoGlyphContinuoEscolhido((String) glyphContinuosType.getSelectedItem());
        variaveisVisuaisEscolhidas = parseListModelString2Array(varVisuaisList2.getModel());
        glyphPanel.setVariaveisVisuaisEscolhidas(variaveisVisuaisEscolhidas);
        atributosEscolhidosContinuousGlyph = parseListModelString2Array(listaAtributosContinuousGlyph2.getModel());
        glyphPanel.setAtributosEscolhidosContinuousGlyph(atributosEscolhidosContinuousGlyph);

        //Acoes para desenhar os glyphs
        glyphPanel.setBounds(painelEsquerda.getBounds());
        glyphPanel.setUseDecisionTree(decisionTreeActivate.isSelected());
        atributosEscolhidosGlyph = getAtributosEscolhidosGlyph();
        glyphPanel.setAtributosEscolhidos(atributosEscolhidosGlyph);
        glyphPanel.setVisible(true);
        glyphPanel.repaint();

        atualizarLegendaGlyphs(atributosEscolhidosGlyph);
//        prepararLegendaStarGlyph(Arrays.asList(atributosEscolhidosStarGlyph));
        atualizarLegendaGlyphsContinuos(atributosEscolhidosContinuousGlyph);
    }//GEN-LAST:event_botaoGerarContinuosGlyphsActionPerformed

    private void cimaAtributoStarGlyphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cimaAtributoStarGlyphButtonActionPerformed
        List<String> novaLista = new ArrayList<>();
        int[] selectedValuesList = listaAtributosContinuousGlyph2.getSelectedIndices();
        for (int i = 0; i < listaAtributosContinuousGlyph2.getModel().getSize(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    novaLista.add(i - 1, listaAtributosContinuousGlyph2.getModel().getElementAt(i));
                } else {
                    novaLista.add(listaAtributosContinuousGlyph2.getModel().getElementAt(i));
                }
            }
        }
        reloadListGUI(novaLista.toArray(), listaAtributosContinuousGlyph2);
    }//GEN-LAST:event_cimaAtributoStarGlyphButtonActionPerformed

    private void baixoAtributoStarGlyphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baixoAtributoStarGlyphButtonActionPerformed
        List<String> novaLista = new ArrayList<>(listaAtributosContinuousGlyph2.getModel().getSize());
        for (int i = 0; i < listaAtributosContinuousGlyph2.getModel().getSize(); i++) {
            novaLista.add(listaAtributosContinuousGlyph2.getModel().getElementAt(i));
        }
        int[] selectedValuesList = listaAtributosContinuousGlyph2.getSelectedIndices();
        for (int i = 0; i < novaLista.size(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    String caraFrente = novaLista.get(i + 1);
                    String caraAtual = novaLista.get(i);
                    novaLista.add(i + 1, caraAtual);
                    novaLista.add(i, caraFrente);
                    novaLista.remove(i + 2);
                    novaLista.remove(i + 2);
                    break;
                }
            }
        }
        reloadListGUI(novaLista.toArray(), listaAtributosContinuousGlyph2);
    }//GEN-LAST:event_baixoAtributoStarGlyphButtonActionPerformed

    private void listaAtributosContinuousGlyph1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaAtributosContinuousGlyph1ValueChanged
        if (listaAtributosContinuousGlyph1.getSelectedValuesList().size() >= 1) {
            inserirAtributoStarGlyphButton.setEnabled(true);
        } else {
            inserirAtributoStarGlyphButton.setEnabled(false);
        }
    }//GEN-LAST:event_listaAtributosContinuousGlyph1ValueChanged

    private void atributo4GlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atributo4GlyphActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo4GlyphActionPerformed

    private void atributo2GlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atributo2GlyphActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo2GlyphActionPerformed

    private void glyphContinuosTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_glyphContinuosTypeItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_glyphContinuosTypeItemStateChanged

    private void glyphContinuosTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_glyphContinuosTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_glyphContinuosTypeActionPerformed

    private void separadorEsqueDir_jSplitPaneComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_separadorEsqueDir_jSplitPaneComponentHidden
//        ActionEvent evt;
//        botaoGerarVisualizacaoActionPerformed(evt);

    }//GEN-LAST:event_separadorEsqueDir_jSplitPaneComponentHidden

    private void nextTest_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextTest_ButtonActionPerformed
        if (testMB != null) {
            totalTarefas = testMB.carregarTarefas();//tarefa ta na tela
            logMB.setInicioTempo(System.currentTimeMillis());
            taskCountLabel.setText("Task: " + totalTarefas + "/" + numMaxTarefas);
            nextTest_Button.setVisible(false);
            saveAnswerButton.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Please, choose an environment.", "To be careful", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_nextTest_ButtonActionPerformed

    private void ambienteB_RadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambienteB_RadioButtonMenuItemActionPerformed
        cenario = "B";
        testMB = new TestMB(cenario, painelEsquerda, manipulador, task_TextPane, painelLegendaVis);
        testMB.carregarTarefas();
    }//GEN-LAST:event_ambienteB_RadioButtonMenuItemActionPerformed

    private void ambienteA_RadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambienteA_RadioButtonMenuItemActionPerformed
        cenario = "A";
//        testMB = new TestMB(cenario, painelEsquerda, manipulador, task_TextPane, painelLegendaVis);
        testMB = new TestMB(cenario, task_TextPane);
        totalTarefas = testMB.carregarTarefas();
        logMB.setInicioTempo(System.currentTimeMillis());
        taskCountLabel.setText("Task: " + totalTarefas + "/" + numMaxTarefas);
    }//GEN-LAST:event_ambienteA_RadioButtonMenuItemActionPerformed

    private void ambienteC_RadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambienteC_RadioButtonMenuItemActionPerformed
        cenario = "C";
        testMB = new TestMB(cenario, painelEsquerda, manipulador, task_TextPane, painelLegendaVis);
        testMB.carregarTarefas();
    }//GEN-LAST:event_ambienteC_RadioButtonMenuItemActionPerformed

    private void ambienteD_RadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambienteD_RadioButtonMenuItemActionPerformed
        cenario = "D";
        testMB = new TestMB(cenario, painelEsquerda, manipulador, task_TextPane, painelLegendaVis);
        testMB.carregarTarefas();
    }//GEN-LAST:event_ambienteD_RadioButtonMenuItemActionPerformed

    private void ambienteE_RadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambienteE_RadioButtonMenuItemActionPerformed
        cenario = "E";
        testMB = new TestMB(cenario, painelEsquerda, manipulador, task_TextPane, painelLegendaVis);
        testMB.carregarTarefas();
    }//GEN-LAST:event_ambienteE_RadioButtonMenuItemActionPerformed

    private void saveAnswerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAnswerButtonActionPerformed
        if (testMB != null) {
            if (totalTarefas <= numMaxTarefas) {
//            int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Sua resposta foi dada com certeza ou "
//                    + "houve algum empecilho?", "Resposta", JOptionPane.YES_NO_OPTION);
                if (!testMB.isTimeOver()) {
                    testMB.interromperThreadTempo();
                }
                acionarLog();
                logMB.addLineLog();
                nextTest_Button.setVisible(true);
                saveAnswerButton.setVisible(false);
                if (totalTarefas == numMaxTarefas) {
                    nextTest_Button.setVisible(false);
                    JOptionPane.showMessageDialog(this, "You fineshed the test. Thanks for participate!");
                    task_TextPane.setText("");
                    nextTest_Button.setVisible(false);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please, choose an environment.", "To be careful", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_saveAnswerButtonActionPerformed

    private ArrayList<Object> getAtributosEscolhidosGlyph() {

        ArrayList<Object> atributosGlyph = new ArrayList<>();
        atributosGlyph.add(atributo1Glyph.getSelectedItem());
        atributosGlyph.add(atributo2Glyph.getSelectedItem());
        atributosGlyph.add(atributo3Glyph.getSelectedItem());
        atributosGlyph.add(atributo4Glyph.getSelectedItem());
        atributosGlyph.add(atributo5Glyph.getSelectedItem());

        return atributosGlyph;
    }

    private String getEscolhidosGlyph() {
        String atributosEscolhidosGlyph = (String) glyphContinuosType.getSelectedItem();

        return atributosEscolhidosGlyph;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                frame = new Main();
                frame.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel abaConfigGlyphs;
    private javax.swing.JPanel abaDetalhes;
    private javax.swing.JPanel abaFiltros;
    private javax.swing.JPanel abaStarGlyphs;
    private javax.swing.JPanel abaTask;
    private javax.swing.JPanel abaTreemap;
    private javax.swing.JRadioButtonMenuItem ambienteA_RadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem ambienteB_RadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem ambienteC_RadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem ambienteD_RadioButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem ambienteE_RadioButtonMenuItem;
    private javax.swing.JComboBox<String> atributo1Glyph;
    private javax.swing.JComboBox<String> atributo2Glyph;
    private javax.swing.JComboBox<String> atributo3Glyph;
    private javax.swing.JComboBox<String> atributo4Glyph;
    private javax.swing.JComboBox<String> atributo5Glyph;
    private javax.swing.JButton baixoAtributoStarGlyphButton;
    private javax.swing.JButton baixoBotao_treemap;
    private javax.swing.JButton baixoButton;
    private javax.swing.JButton botaoGerarContinuosGlyphs;
    private javax.swing.JButton botaoGerarGlyphs;
    private javax.swing.JButton botaoGerarVisualizacao;
    private javax.swing.JCheckBox checkLayeredGlyph;
    private javax.swing.JCheckBox checkLegenda;
    private javax.swing.JCheckBox checkStarGlyph;
    private javax.swing.JButton cimaAtributoStarGlyphButton;
    private javax.swing.JButton cimaBotao_treemap;
    private javax.swing.JButton cimaButton;
    private javax.swing.JList<String> colunasDetalhesList1;
    private javax.swing.JList<String> colunasDetalhesList2;
    private javax.swing.JList<String> colunasHierarquicasList1;
    private javax.swing.JList<String> colunasHierarquicasList2;
    private javax.swing.JComboBox<String> corTreemapComboBox;
    private javax.swing.JCheckBoxMenuItem decisionTreeActivate;
    private javax.swing.JMenu decisionTreeMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileMenuItem;
    private javax.swing.JComboBox<String> glyphContinuosType;
    private javax.swing.ButtonGroup grupoTestesButtonGroup;
    private javax.swing.JButton inserirAtributoStarGlyphButton;
    private javax.swing.JButton inserirBotao_detalhes;
    private javax.swing.JButton inserirBotao_treemap;
    private javax.swing.JButton inserirVarVisualButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JScrollPane legendaBarraRolage;
    private javax.swing.JComboBox<String> legendaComboBox;
    private javax.swing.JList<String> listaAtributosContinuousGlyph1;
    private javax.swing.JList<String> listaAtributosContinuousGlyph2;
    private javax.swing.JButton nextTest_Button;
    private javax.swing.JLabel numeroLabelLabel;
    private javax.swing.JTabbedPane painelAbas_jTabbedPane;
    private javax.swing.JPanel painelCima;
    private javax.swing.JPanel painelDireita;
    private javax.swing.JPanel painelEsquerda;
    private javax.swing.JPanel painelLegendaVis;
    private javax.swing.JProgressBar progressoBarra;
    private javax.swing.JButton removerAtributoStarGlyphButton;
    private javax.swing.JButton removerBotao_detalhes;
    private javax.swing.JButton removerBotao_treemap;
    private javax.swing.JButton removerVarVisualButton;
    private javax.swing.JButton saveAnswerButton;
    private javax.swing.JSplitPane separadorCimaBaixo;
    private javax.swing.JSplitPane separadorEsqueDir_jSplitPane;
    private javax.swing.JComboBox<String> tamanhoTreemapComboBox;
    private javax.swing.JLabel taskCountLabel;
    private javax.swing.JTextPane task_TextPane;
    private javax.swing.JButton updateDetailsButton;
    private javax.swing.JList<String> varVisuaisList1;
    private javax.swing.JList<String> varVisuaisList2;
    // End of variables declaration//GEN-END:variables
    static Main frame;
    private JLayeredPane layerPane;
    private GlassPanel glyphPanel;
    private GlassPanelClick clickPanel;
    private LegendaVisualizacao legendaVisualizacao;
    private String itemTamanho;
    private String itemLegenda;
    private String itemCor;
    private TMView view;
    private VisualizationsArea visualizationTreemap;
    private String[] variaveisVisuaisEscolhidas;
    private String[] atributosEscolhidosContinuousGlyph;
    private String[] selectContinuos;
    private List<String> continuousAttributes;
    private List<String> categoricalAttributes;
    private ManipuladorArquivo manipulador;
    private File selectedFile;
    private Task task;
    private ArrayList<Object> atributosEscolhidosGlyph;
    private String cenario;
    private TestMB testMB;
    private LogMB logMB;
    private int totalTarefas;
    private int numMaxTarefas;

    private void atualizarLegendaGlyphs(ArrayList<Object> atributosEscolhidosGlyph) {
        painelLegendaVis.removeAll();
        atualizarLegendaTreemap(itemCor);
        legendaVisualizacao.setAtributosGlyphs(atributosEscolhidosGlyph);
        for (int i = 0; i < atributosEscolhidosGlyph.size(); i++) {
            if (!atributosEscolhidosGlyph.get(i).equals("---")) {
                JPanel painelDimensao = legendaVisualizacao.addLegendaDimensao(i);
                painelLegendaVis.setLayout(new BoxLayout(painelLegendaVis, BoxLayout.Y_AXIS));
                painelLegendaVis.add(painelDimensao);
            }
            painelLegendaVis.revalidate();
        }
    }

    private void atualizarLegendaGlyphsContinuos(String[] atributosEscolhidosGlyphContinuo) {
        painelLegendaVis.removeAll();
        atualizarLegendaTreemap(itemCor);
        atualizarLegendaGlyphs(atributosEscolhidosGlyph);
        ArrayList<String> lista = new ArrayList();
        //converndo lista<object>
        for (int i = 0; i < atributosEscolhidosGlyphContinuo.length; i++) {
            lista.add(atributosEscolhidosGlyphContinuo[i]);
        }
//        legendaVisualizacao.setAtributosGlyphs(lista);
        legendaVisualizacao.setAtributosGlyphsontinuos(lista);
//        for (int i = 0; i < atributosEscolhidosGlyphContinuo.size(); i++) {   
        JPanel painelDimensao = legendaVisualizacao.addLegendaDimensao(5);
        painelLegendaVis.setLayout(new BoxLayout(painelLegendaVis, BoxLayout.Y_AXIS));
        painelLegendaVis.add(painelDimensao);

        painelLegendaVis.revalidate();
//        }
    }

    private void atualizarLegendaTreemap(String itemCor) {
        painelLegendaVis.removeAll();
        if (!itemCor.equals("---")) {
            JPanel painelDimensao = legendaVisualizacao.addLegendaCorTreemap(itemCor);
            painelLegendaVis.add(painelDimensao);
        }
    }

    private void limparCacheGlyphs() {
        Constantes.setShowGlyph(false);
        botaoGerarGlyphs.setEnabled(false);
        if (glyphPanel != null) {
            glyphPanel.setVisible(false);
            layerPane.remove(glyphPanel);
            glyphPanel = null;

            if (checkLayeredGlyph.isSelected()) {
                checkLayeredGlyph.setSelected(false);
                checkStarGlyph.setSelected(false);
                varVisuaisList1.setEnabled(false);
                varVisuaisList2.setEnabled(false);
                Object[] vazio = {};
                DefaultComboBoxModel emptyList = new DefaultComboBoxModel(vazio);
                varVisuaisList2.setModel(emptyList);
                varVisuaisList1.setModel(emptyList);
//                Object[] newList = new Object[5];
                Object[] newList = new Object[4];
                newList[0] = "Texture";
                newList[1] = "Color";
                newList[2] = "Shape";
                newList[3] = "Letter";
//                newList[4] = "Number";
                DefaultComboBoxModel model = new DefaultComboBoxModel(newList);
                varVisuaisList1.setModel(model);
                atributo1Glyph.setEnabled(false);
                atributo2Glyph.setEnabled(false);
                atributo3Glyph.setEnabled(false);
                atributo4Glyph.setEnabled(false);
                atributo5Glyph.setEnabled(false);
            }

            if (checkStarGlyph.isSelected()) {
                checkStarGlyph.setSelected(false);
                listaAtributosContinuousGlyph1.setEnabled(false);
                listaAtributosContinuousGlyph2.setEnabled(false);
//                painelStarGlyphLegenda.removeAll();

            }

            painelLegendaVis.removeAll();
            painelLegendaVis.repaint();
        }

    }

    private void loadAtributosDetalhes() {
        List<String> itens = new ArrayList<>();
        List<String> itens2 = new ArrayList<>();
        for (String cabecalho : manipulador.getCabecalho()) {
            itens.add(cabecalho);
        }
        for (int i = 0; i < 3; i++) {
            String itemRemovido = itens.remove(0);
            itens2.add(itemRemovido);
        }
        itens.remove(itens.size() - 1);

        reloadListGUI(itens.toArray(), colunasDetalhesList1);
        reloadListGUI(itens2.toArray(), colunasDetalhesList2);
        colunasDetalhesList1.setEnabled(true);
        colunasDetalhesList2.setEnabled(true);

    }

    private void limparResquiciosBasesAnteriores() {
        limparPainelEsquerda();
        limparCacheGlyphs();
        painelLegendaVis.removeAll();
        Object[] vazio = {};
        DefaultComboBoxModel model = new DefaultComboBoxModel(vazio);
        colunasHierarquicasList2.setModel(model);
        listaAtributosContinuousGlyph2.setModel(model);

    }

    private void habilitarVarVisuaisUtilizadasGUI(List<String> variaveis) {
        for (String var : variaveis) {
            switch (var) {
                case "Texture":
                    atributo1Glyph.setEnabled(true);
                    break;
                case "Color":
                    atributo2Glyph.setEnabled(true);
                    break;
                case "Shape":
                    atributo3Glyph.setEnabled(true);
                    break;
                case "Letter":
                    atributo4Glyph.setEnabled(true);
                    break;
                case "Number":
                    atributo5Glyph.setEnabled(true);
                    break;
            }
        }
    }

    private void desabilitarVarVisuaisUtilizadasGUI(List<String> variaveis) {
        for (String var : variaveis) {
            switch (var) {
                case "Texture":
                    atributo1Glyph.setEnabled(false);
                    atributo1Glyph.setSelectedIndex(0);
                    break;
                case "Color":
                    atributo2Glyph.setEnabled(false);
                    atributo2Glyph.setSelectedIndex(0);
                    break;
                case "Shape":
                    atributo3Glyph.setEnabled(false);
                    atributo3Glyph.setSelectedIndex(0);
                    break;
                case "Letter":
                    atributo4Glyph.setEnabled(false);
                    atributo4Glyph.setSelectedIndex(0);
                    break;
                case "Number":
                    atributo5Glyph.setEnabled(false);
                    atributo5Glyph.setSelectedIndex(0);
                    break;
            }
        }
    }

    private Object[] loadColorAttributes2Glyphs() {
        List<String> itens = new ArrayList<>();
        List<String> atributosCategoricosCor = new ArrayList<>();
        for (Object listaAtributosCategorico : getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_2, true)) {
            atributosCategoricosCor.add((String) listaAtributosCategorico);
        }
        itens.addAll(atributosCategoricosCor);
        itens.addAll(continuousAttributes);
        return itens.toArray();
    }

    private void acionarLog() {
        logMB.setFimTempo(System.currentTimeMillis());
        logMB.setTimeOver(testMB.isTimeOver());
        System.out.println("Time is over: " + testMB.isTimeOver());
        logMB.setCorTreemapLog(corTreemapComboBox.getSelectedItem().toString());
        logMB.setTamanhoTreemapLog(tamanhoTreemapComboBox.getSelectedItem().toString());
        logMB.setRotuloTreemapLog(checkLegenda.isSelected()
                ? legendaComboBox.getSelectedItem().toString() : "---");
        logMB.setHierarquiaTreemapLog(Conversor.parseListModel2ListString(colunasHierarquicasList2.getModel()));

        logMB.setOrdemCamadasGlyphLog(Conversor.parseListModel2ListString(varVisuaisList2.getModel()));
        logMB.setTexturaLog(atributo1Glyph.getSelectedItem().toString());
        logMB.setCorGlyphLog(atributo2Glyph.getSelectedItem().toString());
        logMB.setFormaLog(atributo3Glyph.getSelectedItem().toString());
        logMB.setTextoLog(atributo4Glyph.getSelectedItem().toString());

        logMB.setTipoGliphContinuoLog(glyphContinuosType.getSelectedItem().toString());
        logMB.setAtributosContinuosLog(Conversor.parseListModel2ListString(listaAtributosContinuousGlyph2.getModel()));
        if (visualizationTreemap != null) {
            logMB.setRespostasUsuario(visualizationTreemap.getRespostasUsuario());
        }
        logMB.setCenario(cenario);
        logMB.setTarefa(task_TextPane.getText());
    }

    class Task extends SwingWorker<Void, Void> {

        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() {
            int progress = 0;
            //Initialize progress property.
            setProgress(0);
            int ordem = 0;
            while (progress < 100) {
                //Sleep for up to one second.
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ignore) {
                    ignore.printStackTrace();
                }
                //Make progress.     
                ordem++;
                progress = executaTarefas(ordem, progress);
                setProgress(Math.min(progress, 100));
            }
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            setCursor(null); //turn off the wait cursor
        }
    }

    private int executaTarefas(int ordem, int porcentagem) {
        int tarefas = 13;
        switch (ordem) {
            case 1:
                logger.info("Leitura do arquivo.");
                manipulador = new ManipuladorArquivo();
                manipulador.lerArquivo(selectedFile);
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Tratando arquivo: " + porcentagem + "%");
                break;
            case 2:
                try {
                    logger.info("Montando Objetos coluna.");
                    manipulador.montarColunas(manipulador.getCabecalho(), manipulador.getTipos());
                } catch (Exception e) {
                    logger.error("Erro montar objetos COLUNA. \n", e);
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Montando colunas: " + porcentagem + "%");
                break;
            case 3:
                try {
                    logger.info("Carregando itens no treemap e define um GlyphConcreto a esse item.");
                    manipulador.carregarItensTreemap();
                } catch (Throwable e) {
                    logger.error("Erro ao criar itens no treemap. \n", e);
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando itens no TreeMap: " + porcentagem + "%");
                break;
            case 4:
                try {
                    logger.info("Definindo a descrição das colunas.");
                    for (int i = 0; i < manipulador.getColunas().length; i++) {
                        Coluna c = manipulador.getColunas()[i];
                        if (c != null) {
                            c.configurarDescricao(manipulador.getDadosColuna(manipulador.getCabecalho()[i]));
                        } else {
                            throw new Exception();
                        }
                    }
                } catch (Exception e) {
                    logger.error("Erro ao definir a descrição das colunas. \n", e);
                    JOptionPane.showMessageDialog(null, "Ocorreu um erro na leitura do seu arquivo. \nPor favor,"
                            + "Verifique se seu arquivo está configurado corretamente \n"
                            + "e tente novamente.", "Há um problema em seu arquivo!.", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    break;
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Definindo a descrição das colunas: " + porcentagem + "%");
                break;
            case 5:
                logger.info("Preparando atributos contínuos.");
                continuousAttributes = new ArrayList<>();
                continuousAttributes = loadContinuousAttributes();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando atributos contínuos: " + porcentagem + "%");
                break;
            case 6:
                logger.info("Preparando atributos categóricos.");
                categoricalAttributes = new ArrayList<>();
                categoricalAttributes = loadCategorialAttributes();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando atributos categóricos: " + porcentagem + "%");
                break;
            case 7:
                logger.info("Preparando lista tamanho para o treemap.");
                loadItensTamanhoTreemap();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando lista tamanho: " + porcentagem + "%");
                break;
            case 8:
                logger.info("Preparando lista legenda para o treemap.");
                loadItensLegendaTreemap();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando lista legenda: " + porcentagem + "%");
                break;
            case 9:
                logger.info("Preparando variáveis glyphs.");
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_1, true), atributo1Glyph);
                loadVariaveisGlyph(loadColorAttributes2Glyphs(), atributo2Glyph);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_3, true), atributo3Glyph);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_4, true), atributo4Glyph);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_5, true), atributo5Glyph);

                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis glyph: " + porcentagem + "%");
                break;
            case 10:
                logger.info("Preparando variáveis hierarquia para o treemap.");
                loadItensHierarquiaTreemap(categoricalAttributes.toArray());
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis hierarquia Treemap: " + porcentagem + "%");
                break;
            case 11:
                logger.info("Preparando variáveis Cores para o treemap.");
//                loadItensCoresTreemap(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_2, false));
                List<String> coresTreemap = new ArrayList<>();
                coresTreemap.add("---");
                for (String cabecalho : manipulador.getCabecalho()) {
                    coresTreemap.add(cabecalho);
                }
                loadItensCoresTreemap(coresTreemap.toArray());
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis cores Treemap: " + porcentagem + "%");
                break;
            case 12:
                logger.info("Preparando variáveis para Detalhes sob Demanda para o treemap.");
                loadAtributosDetalhes();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis para Detalhes sob Demanda: " + porcentagem + "%");
                break;
            case 13:
                logger.info("Preparando atributos para o starGlyph.");
                loadItensStarGlyph(continuousAttributes.toArray());
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando atributos para o starGlyph: " + porcentagem + "%");
                break;
            default:
                throw new AssertionError();
        }
        return porcentagem;
    }

    private void limparPainelEsquerda() {
        painelEsquerda.removeAll();
        painelEsquerda.repaint();
    }

    private void loadItensTamanhoTreemap() {
        atualizarComboBox(tamanhoTreemapComboBox, loadContinuousAttributes());
        tamanhoTreemapComboBox.setEnabled(true);
    }

    private void loadItensLegendaTreemap() {
        List<String> itens = new ArrayList<>();
        itens.addAll(Arrays.asList(manipulador.getCabecalho()));
        itens.remove(manipulador.getCabecalho().length - 1);
        atualizarComboBox(legendaComboBox, itens);
        botaoGerarVisualizacao.setEnabled(true);
    }

    private void loadItensHierarquiaTreemap(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        colunasHierarquicasList1.setModel(model);
        colunasHierarquicasList1.setEnabled(true);
    }

    private void loadItensDetalhes(Object[] objs) {
        reloadListGUI(objs, colunasDetalhesList1);
        colunasDetalhesList1.setEnabled(true);
    }

    private void loadItensStarGlyph(Object[] objs) {
        reloadListGUI(objs, listaAtributosContinuousGlyph1);
    }

    private void loadItensCoresTreemap(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        corTreemapComboBox.setModel(model);
        corTreemapComboBox.setEnabled(true);
    }

    /**
     * Metodo usado para carregar os atributos categoricos nas listas de glyphs
     *
     * @param nivel
     * @return um array contendo os atributos que serao exibidos nas listas dos
     * glyphs
     */
    private Object[] getListaAtributosCategoricos(Constantes.NivelGlyph nivel, boolean glyph) {
        ArrayList<String> list = new ArrayList<>();
        list.add(0, "---");
        list.addAll(analisarAtributosCategoricos(nivel, glyph));
        return list.toArray();
    }

    private List<String> analisarQuantAtributosCategoricos(List<String> list, Object[] obj) {
        for (String colunasCategorica : categoricalAttributes) {
            Coluna c = ManipuladorArquivo.getColuna(colunasCategorica);
            int quantDadosDistintos = c.getDadosDistintos().size();
            if (quantDadosDistintos <= obj.length) {
                list.add(c.getName());
            }
        }
        return list;
    }

    private List<String> analisarAtributosCategoricos(Constantes.NivelGlyph nivel, boolean glyph) {
        ArrayList<String> list = new ArrayList<>();
        switch (nivel) {
            case NIVEL_1:
                analisarQuantAtributosCategoricos(list, Constantes.TIPO_TEXTURA);
                break;
            case NIVEL_2:
                if (glyph) {
                    analisarQuantAtributosCategoricos(list, Constantes.getCorGlyphs());
                } else {
                    analisarQuantAtributosCategoricos(list, Constantes.getCor());
                }
                break;
            case NIVEL_3:
                GeometryFactory.FORMAS.GLYPH_FORMAS[] formas = new GeometryFactory.FORMAS.GLYPH_FORMAS[GeometryFactory.FORMAS.GLYPH_FORMAS.values().length - 1];
                for (int i = 0; i < formas.length; i++) {
                    formas[i] = GeometryFactory.FORMAS.GLYPH_FORMAS.values()[i];
                }
                analisarQuantAtributosCategoricos(list, formas);
                break;
            case NIVEL_4:
                analisarQuantAtributosCategoricos(list, Constantes.LETRAS_ALFABETO);
                break;
            case NIVEL_5:
                analisarQuantAtributosCategoricos(list, Constantes.NUMEROS);
                break;
            default:
                System.err.println("Nao foi carregar atributos para a dimensão.");
        }
        return list;
    }

    private void atualizarComboBox(JComboBox comboBox, List<String> itens) {
        Object[] items = itens.toArray();
        DefaultComboBoxModel model = new DefaultComboBoxModel(items);
        comboBox.setModel(model);
    }

    private void loadVariaveisGlyph(Object[] objs, JComboBox<String> atributo) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        atributo.setModel(model);
    }

    private void loadVarVisuais(Object[] objs) {
        reloadListGUI(objs, varVisuaisList1);
        varVisuaisList1.setEnabled(true);
    }

    private void reloadListGUI(Object[] objs, JList<String> jList) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        jList.setModel(model);
    }

    private List<String> loadContinuousAttributes() {
        List<String> data = new ArrayList<>();
        for (String cabecalho : manipulador.getCabecalho()) {
            String tipo = manipulador.getMapaCabecalho().get(cabecalho);
            if (tipo.equalsIgnoreCase(Metadados.TipoDados.Integer.name())
                    || tipo.equalsIgnoreCase(Metadados.TipoDados.Double.name())) {
                data.add(cabecalho);
            }
        }
        return data;
    }

    private List<String> loadCategorialAttributes() {
        List<String> list = new ArrayList<>();
        for (int i = 0; i < manipulador.getColunas().length - 1; i++) {
            Coluna c = manipulador.getColunas()[i];
            if (c.getDescription().equals(Metadados.Descricao.CATEGORICAL)) {
                list.add(c.getName());
            }
        }
        return list;
    }

    private void loadVariaveisStarGlyph() {
        Object[] items = loadContinuousAttributes().toArray();
        reloadListGUI(items, listaAtributosContinuousGlyph1);
    }

    private void appendToPane(JTextPane tp, String msg, Color c) {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
    }

//    JScrollPane pane = new JScrollPane();
    private void removerLinhasTableModel(DefaultTableModel dtm) {
        if (dtm.getRowCount() > 0) {
            for (int i = dtm.getRowCount() - 1; i > -1; i--) {
                dtm.removeRow(i);
            }
        }
    }

    /**
     * Invoked when task's progress property changes.
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (Constantes.PROGRESS == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            progressoBarra.setValue(progress);
        }
    }
}
