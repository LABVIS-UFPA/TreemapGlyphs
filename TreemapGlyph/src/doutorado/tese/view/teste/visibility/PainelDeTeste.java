/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doutorado.tese.view.teste.visibility;

import doutorado.tese.control.business.visualizations.glyph.Glyph;
import doutorado.tese.util.Constantes;
import doutorado.tese.control.mb.testeMB.scalabilityMB.SetUpScalabilityTestMB;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 *
 * @author Anderson (LABVIS)
 */
public class PainelDeTeste extends javax.swing.JPanel {

    private AreaCallback areaCallback;
    private final SetUpScalabilityTestMB visibilityTestMB;
    private List<Glyph> familia2Desenho;

    /**
     * Creates new form PainelDeTeste
     */
    public PainelDeTeste() {
        visibilityTestMB = new SetUpScalabilityTestMB();
        initComponents();
        this.areaCallback = (HashMap<String, Integer> areas) -> {
        };

    }

    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
        Graphics2D g2d = (Graphics2D) g;
        Color coritem = null;

        //desenho esquerda
        System.out.println("visibilityTestMB: "+visibilityTestMB);
        System.out.println("getInputConfigs(): "+visibilityTestMB.getInputConfigs());
        System.out.println("visibilityTestMB.getInputConfigs().get(\"coritem\"): "+visibilityTestMB.getInputConfigs().get("coritem"));
        coritem = visibilityTestMB.getInputConfigs().get("coritem") >= 0
                ? Color.decode(Constantes.getCorTreemap()[visibilityTestMB.getInputConfigs().get("coritem")])
                : Color.decode(Constantes.getCorTreemap()[Constantes.getCorTreemap().length - 1]);
        g2d.setColor(coritem);
        g2d.fillRect(visibilityTestMB.getInputConfigs().get("x"), visibilityTestMB.getInputConfigs().get("y"),
                visibilityTestMB.getInputConfigs().get("width"), visibilityTestMB.getInputConfigs().get("height"));
        g2d.setColor(Color.BLACK);
        g2d.drawRect(visibilityTestMB.getInputConfigs().get("x"), visibilityTestMB.getInputConfigs().get("y"),
                visibilityTestMB.getInputConfigs().get("width"), visibilityTestMB.getInputConfigs().get("height"));

        ArrayList<Glyph> listItemInput = new ArrayList<>();
        visibilityTestMB.getItemInput().getGlyph().paint(g2d);
        visibilityTestMB.getItemInput().getGlyph().getChildren(listItemInput);
        g2d.setClip(0, 0, getBounds().width, getBounds().height);

        this.areaCallback.areaUpdated(visibilityTestMB.getAreas());
        //desenho direita
//        g2d.setColor(coritem);
//        g2d.fillRect(scalabilityTestMB.getItemOutput().getBounds().x, scalabilityTestMB.getItemOutput().getBounds().y,
//                scalabilityTestMB.getInputConfigs().get("width"), scalabilityTestMB.getInputConfigs().get("height"));
//        g2d.setColor(Color.BLACK);
//        g2d.drawRect(scalabilityTestMB.getItemOutput().getBounds().x, scalabilityTestMB.getItemOutput().getBounds().y,
//                scalabilityTestMB.getInputConfigs().get("width"), scalabilityTestMB.getInputConfigs().get("height"));
//
//        ArrayList<Glyph> listItemOutput = new ArrayList<>();
//        scalabilityTestMB.getItemOutput().getGlyph().paint(g2d);
//        scalabilityTestMB.getItemOutput().getGlyph().getChildren(listItemOutput);
//        g2d.setClip(0, 0, getBounds().width, getBounds().height);
    }

    public void setAreaCallback(AreaCallback areaCallback) {
        this.areaCallback = areaCallback;
    }

    public interface AreaCallback {

        public void areaUpdated(HashMap<String, Integer> areas);
    }

    public void setInputConfigs(HashMap<String, Integer> inputConfigs) {
        visibilityTestMB.setInputConfigs(inputConfigs);
//        setFamilia2Desenho(visibilityTestMB.configLayersInput());
        setFamilia2Desenho(visibilityTestMB.getFamily2Draw());
        repaint();
    }

    public void updateOutput(HashMap<String, Boolean> output) {
        visibilityTestMB.setOutputConfigs(output);
//        scalabilityTestMB.configLayersOutput();
//        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @return the familia2Desenho
     */
    public List<Glyph> getFamilia2Desenho() {
        return familia2Desenho;
    }

    /**
     * @param familia2Desenho the familia2Desenho to set
     */
    public void setFamilia2Desenho(List<Glyph> familia2Desenho) {
        this.familia2Desenho = familia2Desenho;
    }

    /**
     * @return the quantGlyphs
     */
    public int getQuantGlyphs() {
        return visibilityTestMB.getQuantGlyphsBase();
    }

    /**
     * @return the glyphLayers2draw
     */
    public int[] getGlyphLayers2draw() {
        return visibilityTestMB.getGlyphLayers2draw();
    }
    
    public int getContTarefasRealizadas() {
        return visibilityTestMB.getContTarefasRealizadas();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
