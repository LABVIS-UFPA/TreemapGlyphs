/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doutorado.tese.view;

import doutorado.tese.control.mb.DrawAreaMB;
import doutorado.tese.view.detalhessobdemanda.DetailsOnDemandVisao;
import doutorado.tese.control.business.userTest.ManipuladorLog;
import doutorado.tese.dao.ManipuladorArquivo;
import doutorado.tese.model.Coluna;
import doutorado.tese.util.Constantes;
import doutorado.tese.control.business.visualizations.legenda.LegendaVisualizacao;
import doutorado.tese.util.Metadados;
import doutorado.tese.control.business.visualizations.glyph.factorys.variaveisvisuais.GeometryFactory;
import doutorado.tese.control.mb.GlyphMB;
import doutorado.tese.control.mb.SetUpMB;
import doutorado.tese.model.TreeMapItem;
import doutorado.tese.model.TreeMapNode;
import doutorado.tese.util.Util;
import doutorado.tese.view.filtro.CategoricalFilterSetUp;
import doutorado.tese.view.filtro.ContinuousFilterSetUp;
import doutorado.tese.view.teste.ConsoleTest;
import doutorado.tese.view.teste.MainScreenLog;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import net.bouthier.treemapAWT.TMView;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author Anderson
 */
public class Main extends javax.swing.JFrame implements PropertyChangeListener {

    private static final Logger logger = LogManager.getLogger(Main.class);

    /**
     * Creates new form Main
     */
    public Main() {
        try {
//            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());//Systema
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");//Systema
//            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());//Metal
//            MetalLookAndFeel.setCurrentTheme(new OceanTheme());
//            UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");//feiao
//            UIManager.setLookAndFeel(new MetalLookAndFeel());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            logger.info(Main.class.getName());//.log(Level.SEVERE, null, ex);
        }
        initComponents();
        //zerando
        layerPane = null;
        atributosEscolhidosGlyph = null;
        legendaVisualizacao = null;

        layerPane = new JLayeredPane();
        atributosEscolhidosGlyph = new ArrayList<>();

        legendaVisualizacao = new LegendaVisualizacao(painelLegendaVis.getBounds());
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        separadorEsqueDir_jSplitPane.setOneTouchExpandable(true);
        separadorCimaBaixo.setOneTouchExpandable(true);

        details = new DetailsOnDemandVisao();
        glyphMB = new GlyphMB();
        setupMB = new SetUpMB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        separadorEsqueDir_jSplitPane = new javax.swing.JSplitPane();
        painelEsquerda = new javax.swing.JPanel();
        painelDireita = new javax.swing.JPanel();
        progressoBarra = new javax.swing.JProgressBar();
        separadorCimaBaixo = new javax.swing.JSplitPane();
        legendaBarraRolage = new javax.swing.JScrollPane();
        GridLayout grid = new GridLayout(0, 1);
        painelLegendaVis = new javax.swing.JPanel();
        painelCima = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        painelAbas_jTabbedPane = new javax.swing.JTabbedPane();
        abaTreemap = new javax.swing.JPanel();
        botaoGerarTreemap = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        colunasHierarquicasList1 = new javax.swing.JList<>();
        inserirBotao_treemap = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        colunasHierarquicasList2 = new javax.swing.JList<>();
        cimaBotao_treemap = new javax.swing.JButton();
        baixoBotao_treemap = new javax.swing.JButton();
        removerBotao_treemap = new javax.swing.JButton();
        checkLegenda = new javax.swing.JCheckBox();
        legendaComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        tamanhoTreemapComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        corTreemapComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        abaConfigGlyphs = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        varVisuaisList1 = new javax.swing.JList<>();
        inserirVarVisualButton = new javax.swing.JButton();
        removerVarVisualButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        varVisuaisList2 = new javax.swing.JList<>();
        cimaButton = new javax.swing.JButton();
        baixoButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        textureGlyphComboBox = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        colorGlyphComboBox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        shapeGlyphComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        textGlyphComboBox = new javax.swing.JComboBox<>();
        botaoGerarCategoricalGlyphs = new javax.swing.JButton();
        checkCategoricalGlyph = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        positionGlyphComboBox = new javax.swing.JComboBox<>();
        abaContinuosGlyphs = new javax.swing.JPanel();
        checkContinuousGlyph = new javax.swing.JCheckBox();
        botaoGerarContinuosGlyphs = new javax.swing.JButton();
        inserirAtributoStarGlyphButton = new javax.swing.JButton();
        removerAtributoStarGlyphButton = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        listaAtributosContinuousGlyph2 = new javax.swing.JList<>();
        cimaAtributoStarGlyphButton = new javax.swing.JButton();
        baixoAtributoStarGlyphButton = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        listaAtributosContinuousGlyph = new javax.swing.JList<>();
        glyphContinuosType = new javax.swing.JComboBox<>();
        abaDetalhes = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        colunasDetalhesList1 = new javax.swing.JList<>();
        inserirBotao_detalhes = new javax.swing.JButton();
        removerBotao_detalhes = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        colunasDetalhesList2 = new javax.swing.JList<>();
        jLabel12 = new javax.swing.JLabel();
        updateDetailsButton = new javax.swing.JButton();
        showGlyphOnDetailsCheckBox = new javax.swing.JCheckBox();
        abaFiltros = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        atributosCategoricosList2 = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        atributosCategoricosList = new javax.swing.JList<>();
        inserirBotaoCategoricalFilter = new javax.swing.JButton();
        removerBotaoCategoricalFilter = new javax.swing.JButton();
        categoricalFilterButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        atributosContinuousList = new javax.swing.JList<>();
        inserirBotaoContinuousFilter = new javax.swing.JButton();
        removerBotaoContinuousFilter = new javax.swing.JButton();
        jScrollPane14 = new javax.swing.JScrollPane();
        atributosContinuousList2 = new javax.swing.JList<>();
        continuousFilterButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileMenuItem = new javax.swing.JMenuItem();
        decisionTreeMenu = new javax.swing.JMenu();
        decisionTreeActivate = new javax.swing.JCheckBoxMenuItem();
        testMenu = new javax.swing.JMenu();
        startMenuItem = new javax.swing.JMenuItem();
        consoleMenuItem = new javax.swing.JMenuItem();
        finishMenuItem = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        screenshotMenuItem = new javax.swing.JMenuItem();
        version_jMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Treemap Glyphs");

        separadorEsqueDir_jSplitPane.setDividerLocation(1000);
        separadorEsqueDir_jSplitPane.setOpaque(false);

        painelEsquerda.setBackground(new java.awt.Color(153, 255, 153));
        painelEsquerda.setOpaque(false);
        //painelEsquerda.setSize(, height);

        javax.swing.GroupLayout painelEsquerdaLayout = new javax.swing.GroupLayout(painelEsquerda);
        painelEsquerda.setLayout(painelEsquerdaLayout);
        painelEsquerdaLayout.setHorizontalGroup(
            painelEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1535, Short.MAX_VALUE)
        );
        painelEsquerdaLayout.setVerticalGroup(
            painelEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 695, Short.MAX_VALUE)
        );

        separadorEsqueDir_jSplitPane.setLeftComponent(painelEsquerda);

        painelDireita.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        progressoBarra.setName("teste"); // NOI18N
        progressoBarra.setStringPainted(true);

        separadorCimaBaixo.setDividerLocation(300);
        separadorCimaBaixo.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        legendaBarraRolage.setBackground(new java.awt.Color(255, 255, 255));
        legendaBarraRolage.setBorder(null);

        painelLegendaVis.setLayout(grid);

        legendaBarraRolage.setViewportView(painelLegendaVis);

        separadorCimaBaixo.setRightComponent(legendaBarraRolage);

        javax.swing.GroupLayout painelCimaLayout = new javax.swing.GroupLayout(painelCima);
        painelCima.setLayout(painelCimaLayout);
        painelCimaLayout.setHorizontalGroup(
            painelCimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        painelCimaLayout.setVerticalGroup(
            painelCimaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        separadorCimaBaixo.setLeftComponent(painelCima);

        botaoGerarTreemap.setText("View Treemap");
        botaoGerarTreemap.setEnabled(false);
        botaoGerarTreemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarTreemapActionPerformed(evt);
            }
        });

        jLabel2.setText("Group Hierarchy:");

        colunasHierarquicasList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasHierarquicasList1ValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(colunasHierarquicasList1);

        inserirBotao_treemap.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        inserirBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirBotao_treemap.setEnabled(false);
        inserirBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirBotao_treemapActionPerformed(evt);
            }
        });

        colunasHierarquicasList2.setEnabled(false);
        colunasHierarquicasList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasHierarquicasList2ValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(colunasHierarquicasList2);

        cimaBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaUp.png"))); // NOI18N
        cimaBotao_treemap.setEnabled(false);
        cimaBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cimaBotao_treemapActionPerformed(evt);
            }
        });

        baixoBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDown.png"))); // NOI18N
        baixoBotao_treemap.setEnabled(false);
        baixoBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baixoBotao_treemapActionPerformed(evt);
            }
        });

        removerBotao_treemap.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        removerBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerBotao_treemap.setEnabled(false);
        removerBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBotao_treemapActionPerformed(evt);
            }
        });

        checkLegenda.setText("Label:");
        checkLegenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkLegendaActionPerformed(evt);
            }
        });

        legendaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        legendaComboBox.setToolTipText("");
        legendaComboBox.setEnabled(false);

        jLabel1.setText("Size:");

        tamanhoTreemapComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        tamanhoTreemapComboBox.setEnabled(false);

        jLabel4.setText("Color:");

        corTreemapComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        corTreemapComboBox.setEnabled(false);
        corTreemapComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                corTreemapComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Available Attributes:");

        javax.swing.GroupLayout abaTreemapLayout = new javax.swing.GroupLayout(abaTreemap);
        abaTreemap.setLayout(abaTreemapLayout);
        abaTreemapLayout.setHorizontalGroup(
            abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaTreemapLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoGerarTreemap, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(abaTreemapLayout.createSequentialGroup()
                        .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(abaTreemapLayout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(removerBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inserirBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(abaTreemapLayout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cimaBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(baixoBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(abaTreemapLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(corTreemapComboBox, 0, 208, Short.MAX_VALUE)
                            .addComponent(tamanhoTreemapComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(abaTreemapLayout.createSequentialGroup()
                        .addComponent(checkLegenda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(legendaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        abaTreemapLayout.setVerticalGroup(
            abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaTreemapLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(abaTreemapLayout.createSequentialGroup()
                        .addComponent(cimaBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(baixoBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addGroup(abaTreemapLayout.createSequentialGroup()
                        .addComponent(inserirBotao_treemap, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removerBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(legendaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkLegenda))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tamanhoTreemapComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(corTreemapComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoGerarTreemap)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        painelAbas_jTabbedPane.addTab("Treemap", abaTreemap);

        jLabel13.setText("Visual variables:");

        varVisuaisList1.setModel(new javax.swing.AbstractListModel<String>() {
            //    String[] strings = { "Texture", "Color", "Shape", "Letter", "Number" };
            //    String[] strings = { "Texture", "Color", "Shape", "Letter"};
            String[] strings = { "Texture", "Color", "Shape", "Text"};
            //    String[] strings = { "Textura", "Cor", "Forma", "Letra"};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        varVisuaisList1.setEnabled(false);
        varVisuaisList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                varVisuaisList1ValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(varVisuaisList1);

        inserirVarVisualButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirVarVisualButton.setEnabled(false);
        inserirVarVisualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirVarVisualButtonActionPerformed(evt);
            }
        });

        removerVarVisualButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerVarVisualButton.setEnabled(false);
        removerVarVisualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerVarVisualButtonActionPerformed(evt);
            }
        });

        jLabel14.setText("Order:");

        varVisuaisList2.setToolTipText("");
        varVisuaisList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                varVisuaisList2ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(varVisuaisList2);

        cimaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaUp.png"))); // NOI18N
        cimaButton.setEnabled(false);
        cimaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cimaButtonActionPerformed(evt);
            }
        });

        baixoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDown.png"))); // NOI18N
        baixoButton.setEnabled(false);
        baixoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baixoButtonActionPerformed(evt);
            }
        });

        jLabel15.setText("Available Attributes:");

        jLabel7.setText("Texture:");

        textureGlyphComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        textureGlyphComboBox.setEnabled(false);
        textureGlyphComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                textureGlyphComboBoxItemStateChanged(evt);
            }
        });

        jLabel8.setText("Color:");

        colorGlyphComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        colorGlyphComboBox.setEnabled(false);
        colorGlyphComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                colorGlyphComboBoxItemStateChanged(evt);
            }
        });

        jLabel9.setText("Shape:");

        shapeGlyphComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        shapeGlyphComboBox.setEnabled(false);
        shapeGlyphComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                shapeGlyphComboBoxItemStateChanged(evt);
            }
        });

        jLabel10.setText("Text:");

        textGlyphComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        textGlyphComboBox.setEnabled(false);
        textGlyphComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                textGlyphComboBoxItemStateChanged(evt);
            }
        });

        botaoGerarCategoricalGlyphs.setText("View Glyphs");
        botaoGerarCategoricalGlyphs.setEnabled(false);
        botaoGerarCategoricalGlyphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarCategoricalGlyphsActionPerformed(evt);
            }
        });

        checkCategoricalGlyph.setText("Layered Glyph");
        checkCategoricalGlyph.setToolTipText("");
        checkCategoricalGlyph.setEnabled(false);
        checkCategoricalGlyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkCategoricalGlyphActionPerformed(evt);
            }
        });

        jLabel3.setText("Position:");

        positionGlyphComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        positionGlyphComboBox.setEnabled(false);
        positionGlyphComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                positionGlyphComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout abaConfigGlyphsLayout = new javax.swing.GroupLayout(abaConfigGlyphs);
        abaConfigGlyphs.setLayout(abaConfigGlyphsLayout);
        abaConfigGlyphsLayout.setHorizontalGroup(
            abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(removerVarVisualButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inserirVarVisualButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(baixoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cimaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel15)
                    .addComponent(checkCategoricalGlyph)
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textureGlyphComboBox, 0, 104, Short.MAX_VALUE)
                            .addComponent(colorGlyphComboBox, 0, 104, Short.MAX_VALUE)
                            .addComponent(positionGlyphComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(botaoGerarCategoricalGlyphs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(shapeGlyphComboBox, 0, 90, Short.MAX_VALUE)
                            .addComponent(textGlyphComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        abaConfigGlyphsLayout.setVerticalGroup(
            abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                .addComponent(checkCategoricalGlyph)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removerVarVisualButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaConfigGlyphsLayout.createSequentialGroup()
                            .addComponent(cimaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(baixoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(inserirVarVisualButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addComponent(shapeGlyphComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textGlyphComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)))
                    .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textureGlyphComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7))
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(colorGlyphComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoGerarCategoricalGlyphs)
                    .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(positionGlyphComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        painelAbas_jTabbedPane.addTab("Categorical Glyph", abaConfigGlyphs);

        checkContinuousGlyph.setText("Continuo Glyph");
        checkContinuousGlyph.setEnabled(false);
        checkContinuousGlyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkContinuousGlyphActionPerformed(evt);
            }
        });

        botaoGerarContinuosGlyphs.setText("View Glyphs");
        botaoGerarContinuosGlyphs.setEnabled(false);
        botaoGerarContinuosGlyphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarContinuosGlyphsActionPerformed(evt);
            }
        });

        inserirAtributoStarGlyphButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirAtributoStarGlyphButton.setEnabled(false);
        inserirAtributoStarGlyphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirAtributoStarGlyphButtonActionPerformed(evt);
            }
        });

        removerAtributoStarGlyphButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerAtributoStarGlyphButton.setEnabled(false);
        removerAtributoStarGlyphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerAtributoStarGlyphButtonActionPerformed(evt);
            }
        });

        listaAtributosContinuousGlyph2.setToolTipText("");
        listaAtributosContinuousGlyph2.setEnabled(false);
        listaAtributosContinuousGlyph2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaAtributosContinuousGlyph2ValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(listaAtributosContinuousGlyph2);

        cimaAtributoStarGlyphButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaUp.png"))); // NOI18N
        cimaAtributoStarGlyphButton.setEnabled(false);
        cimaAtributoStarGlyphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cimaAtributoStarGlyphButtonActionPerformed(evt);
            }
        });

        baixoAtributoStarGlyphButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDown.png"))); // NOI18N
        baixoAtributoStarGlyphButton.setEnabled(false);
        baixoAtributoStarGlyphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baixoAtributoStarGlyphButtonActionPerformed(evt);
            }
        });

        listaAtributosContinuousGlyph.setEnabled(false);
        listaAtributosContinuousGlyph.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaAtributosContinuousGlyphValueChanged(evt);
            }
        });
        jScrollPane11.setViewportView(listaAtributosContinuousGlyph);

        glyphContinuosType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"---", "Profile","Star","Pie","Ang" }));
        glyphContinuosType.setEnabled(false);
        glyphContinuosType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                glyphContinuosTypeItemStateChanged(evt);
            }
        });
        glyphContinuosType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                glyphContinuosTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout abaContinuosGlyphsLayout = new javax.swing.GroupLayout(abaContinuosGlyphs);
        abaContinuosGlyphs.setLayout(abaContinuosGlyphsLayout);
        abaContinuosGlyphsLayout.setHorizontalGroup(
            abaContinuosGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaContinuosGlyphsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaContinuosGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(botaoGerarContinuosGlyphs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(abaContinuosGlyphsLayout.createSequentialGroup()
                        .addGroup(abaContinuosGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(abaContinuosGlyphsLayout.createSequentialGroup()
                                .addComponent(checkContinuousGlyph)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(glyphContinuosType, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(abaContinuosGlyphsLayout.createSequentialGroup()
                                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(abaContinuosGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(inserirAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(removerAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaContinuosGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cimaAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(baixoAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        abaContinuosGlyphsLayout.setVerticalGroup(
            abaContinuosGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaContinuosGlyphsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaContinuosGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkContinuousGlyph, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(glyphContinuosType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaContinuosGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abaContinuosGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(abaContinuosGlyphsLayout.createSequentialGroup()
                            .addComponent(cimaAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(baixoAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(abaContinuosGlyphsLayout.createSequentialGroup()
                            .addComponent(inserirAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(removerAtributoStarGlyphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoGerarContinuosGlyphs)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        painelAbas_jTabbedPane.addTab("Continuous Glyph", abaContinuosGlyphs);

        jLabel6.setText("Available Attributes:");

        colunasDetalhesList1.setEnabled(false);
        colunasDetalhesList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasDetalhesList1ValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(colunasDetalhesList1);

        inserirBotao_detalhes.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        inserirBotao_detalhes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirBotao_detalhes.setEnabled(false);
        inserirBotao_detalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirBotao_detalhesActionPerformed(evt);
            }
        });

        removerBotao_detalhes.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        removerBotao_detalhes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerBotao_detalhes.setEnabled(false);
        removerBotao_detalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBotao_detalhesActionPerformed(evt);
            }
        });

        colunasDetalhesList2.setEnabled(false);
        colunasDetalhesList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasDetalhesList2ValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(colunasDetalhesList2);

        jLabel12.setText("Details on Demand:");

        updateDetailsButton.setText("Update Details");
        updateDetailsButton.setEnabled(false);
        updateDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDetailsButtonActionPerformed(evt);
            }
        });

        showGlyphOnDetailsCheckBox.setText("Show glyph in details");

        javax.swing.GroupLayout abaDetalhesLayout = new javax.swing.GroupLayout(abaDetalhes);
        abaDetalhes.setLayout(abaDetalhesLayout);
        abaDetalhesLayout.setHorizontalGroup(
            abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaDetalhesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showGlyphOnDetailsCheckBox)
                    .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(updateDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(abaDetalhesLayout.createSequentialGroup()
                            .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(inserirBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(removerBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))))
                .addContainerGap(102, Short.MAX_VALUE))
        );
        abaDetalhesLayout.setVerticalGroup(
            abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaDetalhesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showGlyphOnDetailsCheckBox)
                .addGap(6, 6, 6)
                .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(abaDetalhesLayout.createSequentialGroup()
                        .addComponent(inserirBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removerBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateDetailsButton)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        painelAbas_jTabbedPane.addTab("Details", abaDetalhes);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Categorical filter"));

        atributosCategoricosList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        atributosCategoricosList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        atributosCategoricosList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                atributosCategoricosList2ValueChanged(evt);
            }
        });
        jScrollPane12.setViewportView(atributosCategoricosList2);

        atributosCategoricosList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        atributosCategoricosList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                atributosCategoricosListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(atributosCategoricosList);

        inserirBotaoCategoricalFilter.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        inserirBotaoCategoricalFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirBotaoCategoricalFilter.setEnabled(false);
        inserirBotaoCategoricalFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirBotaoCategoricalFilterActionPerformed(evt);
            }
        });

        removerBotaoCategoricalFilter.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        removerBotaoCategoricalFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerBotaoCategoricalFilter.setEnabled(false);
        removerBotaoCategoricalFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBotaoCategoricalFilterActionPerformed(evt);
            }
        });

        categoricalFilterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/filter16.png"))); // NOI18N
        categoricalFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoricalFilterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inserirBotaoCategoricalFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removerBotaoCategoricalFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoricalFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(categoricalFilterButton)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(inserirBotaoCategoricalFilter)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(removerBotaoCategoricalFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Continuous filter"));

        atributosContinuousList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        atributosContinuousList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                atributosContinuousListValueChanged(evt);
            }
        });
        jScrollPane13.setViewportView(atributosContinuousList);

        inserirBotaoContinuousFilter.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        inserirBotaoContinuousFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirBotaoContinuousFilter.setEnabled(false);
        inserirBotaoContinuousFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirBotaoContinuousFilterActionPerformed(evt);
            }
        });

        removerBotaoContinuousFilter.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        removerBotaoContinuousFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerBotaoContinuousFilter.setEnabled(false);
        removerBotaoContinuousFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBotaoContinuousFilterActionPerformed(evt);
            }
        });

        atributosContinuousList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        atributosContinuousList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        atributosContinuousList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                atributosContinuousList2ValueChanged(evt);
            }
        });
        jScrollPane14.setViewportView(atributosContinuousList2);

        continuousFilterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/filter16.png"))); // NOI18N
        continuousFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continuousFilterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inserirBotaoContinuousFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removerBotaoContinuousFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(continuousFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(inserirBotaoContinuousFilter)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(removerBotaoContinuousFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(continuousFilterButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout abaFiltrosLayout = new javax.swing.GroupLayout(abaFiltros);
        abaFiltros.setLayout(abaFiltrosLayout);
        abaFiltrosLayout.setHorizontalGroup(
            abaFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaFiltrosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        abaFiltrosLayout.setVerticalGroup(
            abaFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaFiltrosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        painelAbas_jTabbedPane.addTab("Filter", abaFiltros);

        jScrollPane8.setViewportView(painelAbas_jTabbedPane);

        separadorCimaBaixo.setTopComponent(jScrollPane8);

        javax.swing.GroupLayout painelDireitaLayout = new javax.swing.GroupLayout(painelDireita);
        painelDireita.setLayout(painelDireitaLayout);
        painelDireitaLayout.setHorizontalGroup(
            painelDireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelDireitaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressoBarra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(separadorCimaBaixo)
        );
        painelDireitaLayout.setVerticalGroup(
            painelDireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDireitaLayout.createSequentialGroup()
                .addComponent(progressoBarra, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separadorCimaBaixo, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE))
        );

        separadorEsqueDir_jSplitPane.setRightComponent(painelDireita);

        fileMenu.setText("File");

        fileMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/openFile_16x16.png"))); // NOI18N
        fileMenuItem.setText("File");
        fileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuItem);

        jMenuBar1.add(fileMenu);

        decisionTreeMenu.setText("Adaptive Glyph");
        decisionTreeMenu.setToolTipText("");

        decisionTreeActivate.setText("Activate");
        decisionTreeActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decisionTreeActivateActionPerformed(evt);
            }
        });
        decisionTreeMenu.add(decisionTreeActivate);

        jMenuBar1.add(decisionTreeMenu);

        testMenu.setText("Test");

        startMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Start-icon.png"))); // NOI18N
        startMenuItem.setText("Start");
        startMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(startMenuItem);

        consoleMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/console-16.png"))); // NOI18N
        consoleMenuItem.setText("Console");
        consoleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consoleMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(consoleMenuItem);

        finishMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-close-window-17.png"))); // NOI18N
        finishMenuItem.setText("Finish");
        finishMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(finishMenuItem);

        jMenuBar1.add(testMenu);

        aboutMenu.setText("About");

        screenshotMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/cam16x16.png"))); // NOI18N
        screenshotMenuItem.setText("Screenshot");
        screenshotMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screenshotMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(screenshotMenuItem);

        version_jMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/info16x16.png"))); // NOI18N
        version_jMenuItem.setText("Version");
        version_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                version_jMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(version_jMenuItem);

        jMenuBar1.add(aboutMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(separadorEsqueDir_jSplitPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(separadorEsqueDir_jSplitPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String[] parseListModelString2Array(ListModel<String> lista) {
        String[] convertida = new String[lista.getSize()];
        for (int i = 0; i < convertida.length; i++) {
            convertida[i] = lista.getElementAt(i);
        }
        return convertida;
    }

//    public String[] parseListString2Array(ListModel<String> lista) {
//        String[] convertida = new String[lista.getSizeTreemapNode()];
//        for (int i = 0; i < convertida.length; i++) {
//            convertida[i] = lista.getElementAt(i);
//        }
//        return convertida;
//    }

    private void fileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "TXT, TSV & CSV Files", "txt", "csv", "tsv");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            limparResquiciosBasesAnteriores();

            selectedFile = chooser.getSelectedFile();
            progressoBarra.setVisible(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            logger.info("Arquivo selecionado: " + selectedFile);
            //Instances of javax.swing.SwingWorker are not reusuable, so
            //we create new instances as needed.
            setTitle("Treemap Glyphs - " + selectedFile.getName());
            task = new Task();
            task.addPropertyChangeListener(this);
            task.execute();
        } else {
            JOptionPane.showMessageDialog(null, "The file type can not be read.", "Erro!", JOptionPane.ERROR_MESSAGE);
            logger.error("The file type can not be read. - Try it again!");
        }
    }//GEN-LAST:event_fileMenuItemActionPerformed

    private void decisionTreeActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decisionTreeActivateActionPerformed
        Constantes.DECISION_TREE_ACTIVATED = decisionTreeActivate.isSelected();
        if (Constantes.DECISION_TREE_ACTIVATED && Constantes.CONTINUOUS_GLYPH_ACTIVATED) {
            JOptionPane.showMessageDialog(null, "Continuous glyphs will be available with the adaptive glyph as soon as possible.",
                    "Sorry!", JOptionPane.INFORMATION_MESSAGE);
            decisionTreeActivate.setSelected(false);
            checkContinuousGlyph.setSelected(false);
        }
        botaoGerarCategoricalGlyphsActionPerformed(evt);
        logger.info("Arvore de decisao esta ativada? " + Constantes.DECISION_TREE_ACTIVATED);
    }//GEN-LAST:event_decisionTreeActivateActionPerformed

    private void startMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMenuItemActionPerformed
        MainScreenLog screenLog = new MainScreenLog();
        screenLog.setVisible(true);
        JOptionPane.showMessageDialog(null, "To start testing, make sure that the answersTraining.tsv "
                + "and answers.tsv files are in the same directory as the .jar file.",
                "Files TSV", JOptionPane.WARNING_MESSAGE);
        ManipuladorLog.setTesteAcontecendo(true);
    }//GEN-LAST:event_startMenuItemActionPerformed

    private void finishMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishMenuItemActionPerformed
        int resposta = JOptionPane.showConfirmDialog(this, "O teste e toda a aplicação serão encerrados."
                + "Deseja realmente encerrar a aplicação?");
        if (resposta == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_finishMenuItemActionPerformed

    private void consoleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consoleMenuItemActionPerformed
        ConsoleTest console = new ConsoleTest();
        console.setVisible(true);
    }//GEN-LAST:event_consoleMenuItemActionPerformed

    private void version_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_version_jMenuItemActionPerformed
        //Atualizar o arquivo build.xml com o numero da versao
        //Ex: <property name="store.jar.name" value="TreemapGlyph_v17"/> 
        //Gerar o .jar clicando com o botao direito no arquivo build.xml ->
        //executar destino -> outros destinos -> package-for-store
        //o arquivo .jar sera gerado em uma pasta TreemapGlyph\store
        JOptionPane.showMessageDialog(null, "Version 18.0\n"
                + "Developed by LabVis ( http://www.labvis.ufpa.br/ )");
    }//GEN-LAST:event_version_jMenuItemActionPerformed

    private void screenshotMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screenshotMenuItemActionPerformed
        BufferedImage combined;
        if (glassPanel != null) {
            BufferedImage treemapImg = captureComponent(view);
            BufferedImage glyphsImg = captureComponent(glassPanel);

            int w = view.getWidth();
            int h = view.getHeight();
            combined = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);

            combiningBufferedImages(treemapImg, glyphsImg, combined);
        } else {
            combined = captureComponent(view);
        }
        saveScreenShot(combined);
    }//GEN-LAST:event_screenshotMenuItemActionPerformed

    private void continuousFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continuousFilterButtonActionPerformed
        ContinuousFilterSetUp continuousFrame = new ContinuousFilterSetUp();
        continuousFrame.setVisible(true);
    }//GEN-LAST:event_continuousFilterButtonActionPerformed

    private void atributosContinuousList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_atributosContinuousList2ValueChanged
        if (atributosContinuousList2.getSelectedValuesList().size() >= 1) {
            removerBotaoContinuousFilter.setEnabled(true);
        } else {
            removerBotaoContinuousFilter.setEnabled(false);
        }
    }//GEN-LAST:event_atributosContinuousList2ValueChanged

    private void removerBotaoContinuousFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBotaoContinuousFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_removerBotaoContinuousFilterActionPerformed

    private void inserirBotaoContinuousFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirBotaoContinuousFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inserirBotaoContinuousFilterActionPerformed

    private void atributosContinuousListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_atributosContinuousListValueChanged
        if (atributosContinuousList.getSelectedValuesList().size() >= 1) {
            inserirBotaoContinuousFilter.setEnabled(true);
        } else {
            inserirBotaoContinuousFilter.setEnabled(false);
        }
    }//GEN-LAST:event_atributosContinuousListValueChanged

    private void categoricalFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoricalFilterButtonActionPerformed
        CategoricalFilterSetUp categoricalFrame = new CategoricalFilterSetUp();
        categoricalFrame.setVisible(true);

    }//GEN-LAST:event_categoricalFilterButtonActionPerformed

    private void removerBotaoCategoricalFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBotaoCategoricalFilterActionPerformed
        //        List<Object> newListaAtribTreemap = new ArrayList<>();
        //        List<Object> atributos = new ArrayList<>();
        //
        //        for (int i = 0; i < colunasDetalhesList1.getModel().getSize(); i++) {
        //            String elementAt = colunasDetalhesList1.getModel().getElementAt(i);
        //            atributos.add(elementAt);
        //        }
        //        atributos.addAll(colunasDetalhesList2.getSelectedValuesList());
        //        atributos.sort(null);
        //        loadItensDetalhes(atributos.toArray());
        //
        //        //remover o conteudo da lista de hierarquia treemap
        //        ListModel<String> modelGlyphs = colunasDetalhesList2.getModel();
        //        List<String> selectedValuesList = colunasDetalhesList2.getSelectedValuesList();
        //        for (int i = 0; i < modelGlyphs.getSize(); i++) {
        //            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
        //                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
        //            }
        //        }
        //        reloadListGUI(newListaAtribTreemap.toArray(), colunasDetalhesList2);
        //
        //        if (colunasDetalhesList2.getModel().getSize() == 0) {
        //            colunasDetalhesList2.setEnabled(false);
        //        }
    }//GEN-LAST:event_removerBotaoCategoricalFilterActionPerformed

    private void inserirBotaoCategoricalFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirBotaoCategoricalFilterActionPerformed
        //        List<Object> newListaAtribTreemap = new ArrayList<>();
        //        List<Object> atributosEscolhidos = new ArrayList<>();
        //        for (int i = 0; i < colunasDetalhesList2.getModel().getSize(); i++) {
        //            String elementAt = colunasDetalhesList2.getModel().getElementAt(i);
        //            atributosEscolhidos.add(elementAt);
        //        }
        //        atributosEscolhidos.addAll(colunasDetalhesList1.getSelectedValuesList());
        //        atributosEscolhidos.sort(null);
        //        reloadListGUI(atributosEscolhidos.toArray(), colunasDetalhesList2);
        //        colunasDetalhesList2.setEnabled(true);
        ////        botaoGerarVisualizacao.setEnabled(true);
        //
        //        //remover o conteudo da lista de atributos original
        //        ListModel<String> modelOriginal = colunasDetalhesList1.getModel();
        //        List<String> selectedValuesList = colunasDetalhesList1.getSelectedValuesList();
        //        for (int i = 0; i < modelOriginal.getSize(); i++) {
        //            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
        //                newListaAtribTreemap.add(modelOriginal.getElementAt(i));
        //            }
        //        }
        //        loadItensDetalhes(newListaAtribTreemap.toArray());
        //        updateDetailsButton.setEnabled(true);
    }//GEN-LAST:event_inserirBotaoCategoricalFilterActionPerformed

    private void atributosCategoricosListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_atributosCategoricosListValueChanged
        if (atributosCategoricosList.getSelectedValuesList().size() >= 1) {
            inserirBotaoCategoricalFilter.setEnabled(true);
        } else {
            inserirBotaoCategoricalFilter.setEnabled(false);
        }
    }//GEN-LAST:event_atributosCategoricosListValueChanged

    private void atributosCategoricosList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_atributosCategoricosList2ValueChanged
        if (atributosCategoricosList2.getSelectedValuesList().size() >= 1) {
            removerBotaoCategoricalFilter.setEnabled(true);
        } else {
            removerBotaoCategoricalFilter.setEnabled(false);
        }
    }//GEN-LAST:event_atributosCategoricosList2ValueChanged

    private void updateDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDetailsButtonActionPerformed
        String[] valoresEscolhidos = Util.parseListModel2ArrayString(colunasDetalhesList2.getModel());
        visualizationTreemap.setColunasDetalhesDemanda(valoresEscolhidos);
        visualizationTreemap.updateDetalhesDemanda();

        botaoGerarTreemapActionPerformed(evt);
    }//GEN-LAST:event_updateDetailsButtonActionPerformed

    private void colunasDetalhesList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasDetalhesList2ValueChanged
        if (colunasDetalhesList2.getSelectedValuesList().size() >= 1) {
            removerBotao_detalhes.setEnabled(true);
        } else {
            removerBotao_detalhes.setEnabled(false);
        }
    }//GEN-LAST:event_colunasDetalhesList2ValueChanged

    private void removerBotao_detalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBotao_detalhesActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < colunasDetalhesList1.getModel().getSize(); i++) {
            String elementAt = colunasDetalhesList1.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(colunasDetalhesList2.getSelectedValuesList());
        atributos.sort(null);
        loadItensDetalhes(atributos.toArray());

        //remover o conteudo da lista de hierarquia treemap
        ListModel<String> modelGlyphs = colunasDetalhesList2.getModel();
        List<String> selectedValuesList = colunasDetalhesList2.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        reloadListGUI(newListaAtribTreemap.toArray(), colunasDetalhesList2);

        if (colunasDetalhesList2.getModel().getSize() == 0) {
            colunasDetalhesList2.setEnabled(false);
        }
    }//GEN-LAST:event_removerBotao_detalhesActionPerformed

    private void inserirBotao_detalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirBotao_detalhesActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < colunasDetalhesList2.getModel().getSize(); i++) {
            String elementAt = colunasDetalhesList2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(colunasDetalhesList1.getSelectedValuesList());
        atributosEscolhidos.sort(null);
        reloadListGUI(atributosEscolhidos.toArray(), colunasDetalhesList2);
        colunasDetalhesList2.setEnabled(true);
        //        botaoGerarVisualizacao.setEnabled(true);

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = colunasDetalhesList1.getModel();
        List<String> selectedValuesList = colunasDetalhesList1.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaAtribTreemap.add(modelOriginal.getElementAt(i));
            }
        }
        loadItensDetalhes(newListaAtribTreemap.toArray());
        updateDetailsButton.setEnabled(true);
    }//GEN-LAST:event_inserirBotao_detalhesActionPerformed

    private void colunasDetalhesList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasDetalhesList1ValueChanged
        if (colunasDetalhesList1.getSelectedValuesList().size() >= 1) {
            inserirBotao_detalhes.setEnabled(true);
        } else {
            inserirBotao_detalhes.setEnabled(false);
        }
    }//GEN-LAST:event_colunasDetalhesList1ValueChanged

    private void glyphContinuosTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_glyphContinuosTypeActionPerformed
        if (glyphContinuosType.getSelectedIndex() != 0) {
            if (listaAtributosContinuousGlyph.getModel().getSize() != 0) {
                listaAtributosContinuousGlyph.setEnabled(true);
            } else {
                List<String> lista = setupMB.getAtributosContinuos();
//                lista.remove(lista.size() - 1);
                Object[] newList = lista.toArray();

                DefaultComboBoxModel model = new DefaultComboBoxModel(newList);
                listaAtributosContinuousGlyph.setModel(model);
            }
        }
    }//GEN-LAST:event_glyphContinuosTypeActionPerformed

    private void glyphContinuosTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_glyphContinuosTypeItemStateChanged
        listaAtributosContinuousGlyph.setEnabled(Constantes.CONTINUOUS_GLYPH_ACTIVATED);
    }//GEN-LAST:event_glyphContinuosTypeItemStateChanged

    private void listaAtributosContinuousGlyphValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaAtributosContinuousGlyphValueChanged
        if (listaAtributosContinuousGlyph.getSelectedValuesList().size() >= 1) {
            inserirAtributoStarGlyphButton.setEnabled(true);
        } else {
            inserirAtributoStarGlyphButton.setEnabled(false);
        }
    }//GEN-LAST:event_listaAtributosContinuousGlyphValueChanged

    private void baixoAtributoStarGlyphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baixoAtributoStarGlyphButtonActionPerformed
        List<String> novaLista = new ArrayList<>(listaAtributosContinuousGlyph2.getModel().getSize());
        for (int i = 0; i < listaAtributosContinuousGlyph2.getModel().getSize(); i++) {
            novaLista.add(listaAtributosContinuousGlyph2.getModel().getElementAt(i));
        }
        int[] selectedValuesList = listaAtributosContinuousGlyph2.getSelectedIndices();
        for (int i = 0; i < novaLista.size(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    String caraFrente = novaLista.get(i + 1);
                    String caraAtual = novaLista.get(i);
                    novaLista.add(i + 1, caraAtual);
                    novaLista.add(i, caraFrente);
                    novaLista.remove(i + 2);
                    novaLista.remove(i + 2);
                    break;
                }
            }
        }
        reloadListGUI(novaLista.toArray(), listaAtributosContinuousGlyph2);
    }//GEN-LAST:event_baixoAtributoStarGlyphButtonActionPerformed

    private void cimaAtributoStarGlyphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cimaAtributoStarGlyphButtonActionPerformed
        List<String> novaLista = new ArrayList<>();
        int[] selectedValuesList = listaAtributosContinuousGlyph2.getSelectedIndices();
        for (int i = 0; i < listaAtributosContinuousGlyph2.getModel().getSize(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    novaLista.add(i - 1, listaAtributosContinuousGlyph2.getModel().getElementAt(i));
                } else {
                    novaLista.add(listaAtributosContinuousGlyph2.getModel().getElementAt(i));
                }
            }
        }
        reloadListGUI(novaLista.toArray(), listaAtributosContinuousGlyph2);
    }//GEN-LAST:event_cimaAtributoStarGlyphButtonActionPerformed

    private void listaAtributosContinuousGlyph2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaAtributosContinuousGlyph2ValueChanged
        if (listaAtributosContinuousGlyph2.getSelectedValuesList().size() >= 1) {
            removerAtributoStarGlyphButton.setEnabled(true);
            if (listaAtributosContinuousGlyph2.getSelectedIndex() > 0) {
                cimaAtributoStarGlyphButton.setEnabled(true);
            } else {
                cimaAtributoStarGlyphButton.setEnabled(false);
            }
            if (listaAtributosContinuousGlyph2.getSelectedIndex() < listaAtributosContinuousGlyph2.getModel().getSize() - 1) {
                baixoAtributoStarGlyphButton.setEnabled(true);
            } else {
                baixoAtributoStarGlyphButton.setEnabled(false);
            }
        } else {
            removerAtributoStarGlyphButton.setEnabled(false);
            cimaAtributoStarGlyphButton.setEnabled(false);
            baixoAtributoStarGlyphButton.setEnabled(false);
        }
    }//GEN-LAST:event_listaAtributosContinuousGlyph2ValueChanged

    private void removerAtributoStarGlyphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerAtributoStarGlyphButtonActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < listaAtributosContinuousGlyph.getModel().getSize(); i++) {
            String elementAt = listaAtributosContinuousGlyph.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(listaAtributosContinuousGlyph2.getSelectedValuesList());
        atributos.sort(null);
        reloadListGUI(atributos.toArray(), listaAtributosContinuousGlyph);

        //remover o conteudo da lista de hierarquia treemap
        ListModel<String> modelGlyphs = listaAtributosContinuousGlyph2.getModel();
        List<String> selectedValuesList = listaAtributosContinuousGlyph2.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        reloadListGUI(newListaAtribTreemap.toArray(), listaAtributosContinuousGlyph2);

        if (listaAtributosContinuousGlyph2.getModel().getSize() == 0) {
            listaAtributosContinuousGlyph2.setEnabled(false);
            botaoGerarContinuosGlyphs.setEnabled(false);
        } else {
            botaoGerarContinuosGlyphs.setEnabled(true);
        }
    }//GEN-LAST:event_removerAtributoStarGlyphButtonActionPerformed

    private void inserirAtributoStarGlyphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirAtributoStarGlyphButtonActionPerformed
        List<Object> newListaVarVisuais = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < listaAtributosContinuousGlyph2.getModel().getSize(); i++) {
            String elementAt = listaAtributosContinuousGlyph2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(listaAtributosContinuousGlyph.getSelectedValuesList());
        reloadListGUI(atributosEscolhidos.toArray(), listaAtributosContinuousGlyph2);
        listaAtributosContinuousGlyph2.setEnabled(true);

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = listaAtributosContinuousGlyph.getModel();
        List<String> selectedValuesList = listaAtributosContinuousGlyph.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaVarVisuais.add(modelOriginal.getElementAt(i));
            }
        }
        reloadListGUI(newListaVarVisuais.toArray(), listaAtributosContinuousGlyph);
        botaoGerarContinuosGlyphs.setEnabled(true);
    }//GEN-LAST:event_inserirAtributoStarGlyphButtonActionPerformed

    private void botaoGerarContinuosGlyphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarContinuosGlyphsActionPerformed
        createGlassPanel();
        configGlassPanelClick();
        configDetalhesSobDemanda();

        glassPanel.setManipulador(manipulador);
        glassPanel.setTipoGlyphContinuoEscolhido((String) glyphContinuosType.getSelectedItem());
        variaveisVisuaisEscolhidas = parseListModelString2Array(varVisuaisList2.getModel());
        glassPanel.setVariaveisVisuaisEscolhidas(variaveisVisuaisEscolhidas);
        atributosEscolhidosContinuousGlyph = parseListModelString2Array(listaAtributosContinuousGlyph2.getModel());
        glassPanel.setAtributosEscolhidosContinuousGlyph(atributosEscolhidosContinuousGlyph);

        //Acoes para desenhar os glyphs
        glassPanel.setBounds(painelEsquerda.getBounds());
        atributosEscolhidosGlyph = getAtributosEscolhidosGlyph();
        glassPanel.setAtributosEscolhidos(atributosEscolhidosGlyph);
        glassPanel.setVisible(true);
        glassPanel.repaint();
        atualizarLegendaCategoricalGlyphs(atributosEscolhidosGlyph);
        //        prepararLegendaStarGlyph(Arrays.asList(atributosEscolhidosStarGlyph));
        desenhouContinuousGlyph = atualizarLegendaGlyphsContinuos(atributosEscolhidosContinuousGlyph);
    }//GEN-LAST:event_botaoGerarContinuosGlyphsActionPerformed

    private void checkContinuousGlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkContinuousGlyphActionPerformed
        Constantes.CONTINUOUS_GLYPH_ACTIVATED = checkContinuousGlyph.isSelected();
        if (checkCategoricalGlyph.isSelected() || checkContinuousGlyph.isSelected()) {
            showGlyphOnDetailsCheckBox.setEnabled(true);
        }
        if (Constantes.CONTINUOUS_GLYPH_ACTIVATED) {
            if (glassPanel == null) {
                createGlassPanel();
                configGlassPanelClick();
                configDetalhesSobDemanda();
            }
            glyphContinuosType.setEnabled(true);
        } else {
            cleanCacheContinuousGlyph();
            if (verificarGlyphCategoricoAtivo()) {
                createGlassPanel();
                configGlassPanelClick();
                configDetalhesSobDemanda();
                botaoGerarCategoricalGlyphsActionPerformed(evt);
            }
        }
    }//GEN-LAST:event_checkContinuousGlyphActionPerformed

    private void checkCategoricalGlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkCategoricalGlyphActionPerformed
        Constantes.CATEGORICAL_GLYPH_ACTIVATED = checkCategoricalGlyph.isSelected();
        if (checkCategoricalGlyph.isSelected() || checkContinuousGlyph.isSelected()) {
            showGlyphOnDetailsCheckBox.setEnabled(true);
        }
        if (Constantes.CATEGORICAL_GLYPH_ACTIVATED) {
            createGlassPanel();
            configGlassPanelClick();
            configDetalhesSobDemanda();
            varVisuaisList1.setEnabled(true);
        } else {
            cleanCacheCategoricalGlyph();
        }
    }//GEN-LAST:event_checkCategoricalGlyphActionPerformed

    private void botaoGerarCategoricalGlyphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarCategoricalGlyphsActionPerformed
        //zerando tudo
        variaveisVisuaisEscolhidas = null;
        //acoes para configurar os glyphs
        variaveisVisuaisEscolhidas = parseListModelString2Array(varVisuaisList2.getModel());

        createGlassPanel();
        configGlassPanelClick();
        configDetalhesSobDemanda();

        glassPanel.setManipulador(manipulador);
        glassPanel.setVariaveisVisuaisEscolhidas(variaveisVisuaisEscolhidas);
        //Acoes para desenhar os glyphs
        glassPanel.setBounds(painelEsquerda.getBounds());
        Constantes.DECISION_TREE_ACTIVATED = decisionTreeActivate.isSelected();

        atributosEscolhidosGlyph = getAtributosEscolhidosGlyph();
        if (!esqueceuSelecionarAtributo()) {
            if (Constantes.CONTINUOUS_GLYPH_ACTIVATED && !desenhouContinuousGlyph) {
                JOptionPane.showMessageDialog(null, "You forget to set up the continuous glyph!", "Opps!", JOptionPane.WARNING_MESSAGE);
            } else {
                glassPanel.setAtributosEscolhidos(atributosEscolhidosGlyph);
                glassPanel.setVisible(true);
                atualizarLegendaCategoricalGlyphs(atributosEscolhidosGlyph);
                glassPanel.repaint();
            }
        } else {
            if (glassPanel != null) {
                JOptionPane.showMessageDialog(null, "Please, select a attribute!", "Select a attribute", JOptionPane.WARNING_MESSAGE);
            } else {
                System.err.println("esqueceu de selecionar um atributo... e o glyphPanel ta null");
            }
        }
    }//GEN-LAST:event_botaoGerarCategoricalGlyphsActionPerformed

    private void textGlyphComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_textGlyphComboBoxItemStateChanged
        botaoGerarCategoricalGlyphs.setEnabled(true);
    }//GEN-LAST:event_textGlyphComboBoxItemStateChanged

    private void shapeGlyphComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_shapeGlyphComboBoxItemStateChanged
        botaoGerarCategoricalGlyphs.setEnabled(true);
    }//GEN-LAST:event_shapeGlyphComboBoxItemStateChanged

    private void colorGlyphComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_colorGlyphComboBoxItemStateChanged
        botaoGerarCategoricalGlyphs.setEnabled(true);
    }//GEN-LAST:event_colorGlyphComboBoxItemStateChanged

    private void textureGlyphComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_textureGlyphComboBoxItemStateChanged
        botaoGerarCategoricalGlyphs.setEnabled(true);
    }//GEN-LAST:event_textureGlyphComboBoxItemStateChanged

    private void baixoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baixoButtonActionPerformed
        List<String> novaLista = new ArrayList<>(varVisuaisList2.getModel().getSize());
        for (int i = 0; i < varVisuaisList2.getModel().getSize(); i++) {
            novaLista.add(varVisuaisList2.getModel().getElementAt(i));
        }
        int[] selectedValuesList = varVisuaisList2.getSelectedIndices();
        for (int i = 0; i < novaLista.size(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    String caraFrente = novaLista.get(i + 1);
                    String caraAtual = novaLista.get(i);
                    novaLista.add(i + 1, caraAtual);
                    novaLista.add(i, caraFrente);
                    novaLista.remove(i + 2);
                    novaLista.remove(i + 2);
                    break;
                }
            }
        }
        reloadListGUI(novaLista.toArray(), varVisuaisList2);
    }//GEN-LAST:event_baixoButtonActionPerformed

    private void cimaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cimaButtonActionPerformed
        List<String> novaLista = new ArrayList<>();
        int[] selectedValuesList = varVisuaisList2.getSelectedIndices();
        for (int i = 0; i < varVisuaisList2.getModel().getSize(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    novaLista.add(i - 1, varVisuaisList2.getModel().getElementAt(i));
                } else {
                    novaLista.add(varVisuaisList2.getModel().getElementAt(i));
                }
            }
        }
        reloadListGUI(novaLista.toArray(), varVisuaisList2);
    }//GEN-LAST:event_cimaButtonActionPerformed

    private void varVisuaisList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_varVisuaisList2ValueChanged
        if (varVisuaisList2.getSelectedValuesList().size() >= 1) {
            removerVarVisualButton.setEnabled(true);
            if (varVisuaisList2.getSelectedIndex() > 0) {
                cimaButton.setEnabled(true);
            } else {
                cimaButton.setEnabled(false);
            }
            if (varVisuaisList2.getSelectedIndex() < varVisuaisList2.getModel().getSize() - 1) {
                baixoButton.setEnabled(true);
            } else {
                baixoButton.setEnabled(false);
            }
        } else {
            removerVarVisualButton.setEnabled(false);
            cimaButton.setEnabled(false);
            baixoButton.setEnabled(false);
        }
        if (varVisuaisList2.getModel().getSize() < 1) {
            botaoGerarCategoricalGlyphs.setEnabled(false);
        }
    }//GEN-LAST:event_varVisuaisList2ValueChanged

    private void removerVarVisualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerVarVisualButtonActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < varVisuaisList1.getModel().getSize(); i++) {
            String elementAt = varVisuaisList1.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(varVisuaisList2.getSelectedValuesList());
        //        atributos.sort(null);
        loadVarVisuais(atributos.toArray());
        desabilitarVarVisuaisUtilizadasGUI(varVisuaisList2.getSelectedValuesList());

        //remover o conteudo da lista de hierarquia treemap
        ListModel<String> modelGlyphs = varVisuaisList2.getModel();
        List<String> selectedValuesList = varVisuaisList2.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        reloadListGUI(newListaAtribTreemap.toArray(), varVisuaisList2);

        if (varVisuaisList2.getModel().getSize() == 0) {
            varVisuaisList2.setEnabled(false);
        }
    }//GEN-LAST:event_removerVarVisualButtonActionPerformed

    private void inserirVarVisualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirVarVisualButtonActionPerformed
        List<Object> newListaVarVisuais = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < varVisuaisList2.getModel().getSize(); i++) {
            String elementAt = varVisuaisList2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(varVisuaisList1.getSelectedValuesList());
        //        atributosEscolhidos.sort(null);
        reloadListGUI(atributosEscolhidos.toArray(), varVisuaisList2);
        varVisuaisList2.setEnabled(true);
        //        botaoConfiVarVisuais.setEnabled(true);
        habilitarVarVisuaisUtilizadasGUI(varVisuaisList1.getSelectedValuesList());

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = varVisuaisList1.getModel();
        List<String> selectedValuesList = varVisuaisList1.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaVarVisuais.add(modelOriginal.getElementAt(i));
            }
        }
        reloadListGUI(newListaVarVisuais.toArray(), varVisuaisList1);
        //loadVarVisuais(newListaVarVisuais.toArray());
    }//GEN-LAST:event_inserirVarVisualButtonActionPerformed

    private void varVisuaisList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_varVisuaisList1ValueChanged
        if (varVisuaisList1.getSelectedValuesList().size() >= 1) {
            inserirVarVisualButton.setEnabled(true);
        } else {
            inserirVarVisualButton.setEnabled(false);
        }
    }//GEN-LAST:event_varVisuaisList1ValueChanged

    private void corTreemapComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_corTreemapComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_corTreemapComboBoxActionPerformed

    private void checkLegendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkLegendaActionPerformed
        if (checkLegenda.isSelected()) {
            Constantes.setShowLegenda(true);
            legendaComboBox.setEnabled(true);
        } else {
            Constantes.setShowLegenda(false);
            legendaComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_checkLegendaActionPerformed

    private void removerBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBotao_treemapActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < colunasHierarquicasList1.getModel().getSize(); i++) {
            String elementAt = colunasHierarquicasList1.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(colunasHierarquicasList2.getSelectedValuesList());
        atributos.sort(null);
        reloadListGUI(atributos.toArray(), colunasHierarquicasList1);

        //remover o conteudo da lista de colunasHierarquicasList2 treemap
        ListModel<String> modelGlyphs = colunasHierarquicasList2.getModel();
        List<String> selectedValuesList = colunasHierarquicasList2.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        reloadListGUI(newListaAtribTreemap.toArray(), colunasHierarquicasList2);

        if (colunasHierarquicasList2.getModel().getSize() == 0) {
            colunasHierarquicasList2.setEnabled(false);
        }
    }//GEN-LAST:event_removerBotao_treemapActionPerformed

    private void baixoBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baixoBotao_treemapActionPerformed
        List<String> novaLista = new ArrayList<>(colunasHierarquicasList2.getModel().getSize());
        for (int i = 0; i < colunasHierarquicasList2.getModel().getSize(); i++) {
            novaLista.add(colunasHierarquicasList2.getModel().getElementAt(i));
        }
        int[] selectedValuesList = colunasHierarquicasList2.getSelectedIndices();
        for (int i = 0; i < novaLista.size(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    String caraFrente = novaLista.get(i + 1);
                    String caraAtual = novaLista.get(i);
                    novaLista.add(i + 1, caraAtual);
                    novaLista.add(i, caraFrente);
                    novaLista.remove(i + 2);
                    novaLista.remove(i + 2);
                    break;
                }
            }
        }
        reloadListGUI(novaLista.toArray(), colunasHierarquicasList2);
    }//GEN-LAST:event_baixoBotao_treemapActionPerformed

    private void cimaBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cimaBotao_treemapActionPerformed
        List<String> novaLista = new ArrayList<>();
        int[] selectedValuesList = colunasHierarquicasList2.getSelectedIndices();
        for (int i = 0; i < colunasHierarquicasList2.getModel().getSize(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    novaLista.add(i - 1, colunasHierarquicasList2.getModel().getElementAt(i));
                } else {
                    novaLista.add(colunasHierarquicasList2.getModel().getElementAt(i));
                }
            }
        }
        reloadListGUI(novaLista.toArray(), colunasHierarquicasList2);
    }//GEN-LAST:event_cimaBotao_treemapActionPerformed

    private void colunasHierarquicasList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasHierarquicasList2ValueChanged
        if (colunasHierarquicasList2.getSelectedValuesList().size() >= 1) {
            removerBotao_treemap.setEnabled(true);
            if (colunasHierarquicasList2.getSelectedIndex() > 0) {
                cimaBotao_treemap.setEnabled(true);
            } else {
                cimaBotao_treemap.setEnabled(false);
            }
            if (colunasHierarquicasList2.getSelectedIndex() < colunasHierarquicasList2.getModel().getSize() - 1) {
                baixoBotao_treemap.setEnabled(true);
            } else {
                baixoBotao_treemap.setEnabled(false);
            }
        } else {
            removerBotao_treemap.setEnabled(false);
            cimaBotao_treemap.setEnabled(false);
            baixoBotao_treemap.setEnabled(false);
        }
    }//GEN-LAST:event_colunasHierarquicasList2ValueChanged

    private void inserirBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirBotao_treemapActionPerformed
        List<Object> newListaVarVisuais = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < colunasHierarquicasList2.getModel().getSize(); i++) {
            String elementAt = colunasHierarquicasList2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(colunasHierarquicasList1.getSelectedValuesList());
        reloadListGUI(atributosEscolhidos.toArray(), colunasHierarquicasList2);
        colunasHierarquicasList2.setEnabled(true);

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = colunasHierarquicasList1.getModel();
        List<String> selectedValuesList = colunasHierarquicasList1.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaVarVisuais.add(modelOriginal.getElementAt(i));
            }
        }
        reloadListGUI(newListaVarVisuais.toArray(), colunasHierarquicasList1);
    }//GEN-LAST:event_inserirBotao_treemapActionPerformed

    private void colunasHierarquicasList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasHierarquicasList1ValueChanged
        if (colunasHierarquicasList1.getSelectedValuesList().size() >= 1) {
            inserirBotao_treemap.setEnabled(true);
        } else {
            inserirBotao_treemap.setEnabled(false);
        }
    }//GEN-LAST:event_colunasHierarquicasList1ValueChanged

    private void botaoGerarTreemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarTreemapActionPerformed
        cleanAllVisualizations();

        loadSetupTreemap();

        visualizationTreemap = new DrawAreaMB(painelEsquerda.getWidth(), painelEsquerda.getHeight(),
                manipulador, itemTamanho, itensHierarquia, itemLegenda, itemCor, itensDetalhes, () -> {
                });
        Constantes.QUANT_HIERARQUIAS = itensHierarquia.length;
        painelEsquerda.add(layerPane);
        view = visualizationTreemap.getView();//view eh o Jpanel do treemap
        layerPane.setBounds(view.getBounds());

        atualizarLegendaTreemap(itemCor);
        progressoBarra.setVisible(false);
        checkCategoricalGlyph.setEnabled(true);
        checkContinuousGlyph.setEnabled(true);

        configGlassPanelClick();
        configDetalhesSobDemanda();
    }//GEN-LAST:event_botaoGerarTreemapActionPerformed

    private void positionGlyphComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_positionGlyphComboBoxItemStateChanged
        botaoGerarCategoricalGlyphs.setEnabled(true);
    }//GEN-LAST:event_positionGlyphComboBoxItemStateChanged

    private ArrayList<Object> getAtributosEscolhidosGlyph() {

        ArrayList<Object> atributosGlyph = new ArrayList<>();
        atributosGlyph.add(textureGlyphComboBox.getSelectedItem());
        atributosGlyph.add(colorGlyphComboBox.getSelectedItem());
        atributosGlyph.add(shapeGlyphComboBox.getSelectedItem());
        atributosGlyph.add(textGlyphComboBox.getSelectedItem());
        atributosGlyph.add(positionGlyphComboBox.getSelectedItem());

        return atributosGlyph;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                frame = new Main();
                frame.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel abaConfigGlyphs;
    private javax.swing.JPanel abaContinuosGlyphs;
    private javax.swing.JPanel abaDetalhes;
    private javax.swing.JPanel abaFiltros;
    private javax.swing.JPanel abaTreemap;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JList<String> atributosCategoricosList;
    private javax.swing.JList<String> atributosCategoricosList2;
    private javax.swing.JList<String> atributosContinuousList;
    private javax.swing.JList<String> atributosContinuousList2;
    private javax.swing.JButton baixoAtributoStarGlyphButton;
    private javax.swing.JButton baixoBotao_treemap;
    private javax.swing.JButton baixoButton;
    private javax.swing.JButton botaoGerarCategoricalGlyphs;
    private javax.swing.JButton botaoGerarContinuosGlyphs;
    private javax.swing.JButton botaoGerarTreemap;
    private javax.swing.JButton categoricalFilterButton;
    private javax.swing.JCheckBox checkCategoricalGlyph;
    private javax.swing.JCheckBox checkContinuousGlyph;
    private javax.swing.JCheckBox checkLegenda;
    private javax.swing.JButton cimaAtributoStarGlyphButton;
    private javax.swing.JButton cimaBotao_treemap;
    private javax.swing.JButton cimaButton;
    private javax.swing.JComboBox<String> colorGlyphComboBox;
    private javax.swing.JList<String> colunasDetalhesList1;
    private javax.swing.JList<String> colunasDetalhesList2;
    private javax.swing.JList<String> colunasHierarquicasList1;
    private javax.swing.JList<String> colunasHierarquicasList2;
    private javax.swing.JMenuItem consoleMenuItem;
    private javax.swing.JButton continuousFilterButton;
    private javax.swing.JComboBox<String> corTreemapComboBox;
    private javax.swing.JCheckBoxMenuItem decisionTreeActivate;
    private javax.swing.JMenu decisionTreeMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileMenuItem;
    private javax.swing.JMenuItem finishMenuItem;
    private javax.swing.JComboBox<String> glyphContinuosType;
    private javax.swing.JButton inserirAtributoStarGlyphButton;
    private javax.swing.JButton inserirBotaoCategoricalFilter;
    private javax.swing.JButton inserirBotaoContinuousFilter;
    private javax.swing.JButton inserirBotao_detalhes;
    private javax.swing.JButton inserirBotao_treemap;
    private javax.swing.JButton inserirVarVisualButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JScrollPane legendaBarraRolage;
    private javax.swing.JComboBox<String> legendaComboBox;
    private javax.swing.JList<String> listaAtributosContinuousGlyph;
    private javax.swing.JList<String> listaAtributosContinuousGlyph2;
    private javax.swing.JTabbedPane painelAbas_jTabbedPane;
    private javax.swing.JPanel painelCima;
    private javax.swing.JPanel painelDireita;
    private javax.swing.JPanel painelEsquerda;
    private javax.swing.JPanel painelLegendaVis;
    private javax.swing.JComboBox<String> positionGlyphComboBox;
    private javax.swing.JProgressBar progressoBarra;
    private javax.swing.JButton removerAtributoStarGlyphButton;
    private javax.swing.JButton removerBotaoCategoricalFilter;
    private javax.swing.JButton removerBotaoContinuousFilter;
    private javax.swing.JButton removerBotao_detalhes;
    private javax.swing.JButton removerBotao_treemap;
    private javax.swing.JButton removerVarVisualButton;
    private javax.swing.JMenuItem screenshotMenuItem;
    private javax.swing.JSplitPane separadorCimaBaixo;
    private javax.swing.JSplitPane separadorEsqueDir_jSplitPane;
    private javax.swing.JComboBox<String> shapeGlyphComboBox;
    private javax.swing.JCheckBox showGlyphOnDetailsCheckBox;
    private javax.swing.JMenuItem startMenuItem;
    private javax.swing.JComboBox<String> tamanhoTreemapComboBox;
    private javax.swing.JMenu testMenu;
    private javax.swing.JComboBox<String> textGlyphComboBox;
    private javax.swing.JComboBox<String> textureGlyphComboBox;
    private javax.swing.JButton updateDetailsButton;
    private javax.swing.JList<String> varVisuaisList1;
    private javax.swing.JList<String> varVisuaisList2;
    private javax.swing.JMenuItem version_jMenuItem;
    // End of variables declaration//GEN-END:variables
    static Main frame;
    private JLayeredPane layerPane;
    private GlassPanel glassPanel;
    private GlassPanelClick clickPanel;
    private LegendaVisualizacao legendaVisualizacao;
    private String itemTamanho;
    private String itemLegenda;
    private String itemCor;
    private TMView view;
    private DrawAreaMB visualizationTreemap;
    private String[] variaveisVisuaisEscolhidas;
    private String[] atributosEscolhidosContinuousGlyph;
    private List<String> continuousAttributes;
    private List<String> categoricalAttributes;
    private ManipuladorArquivo manipulador;
    private File selectedFile;
    private Task task;
    private ArrayList<Object> atributosEscolhidosGlyph;
    private String[] itensHierarquia;
    private String[] itensDetalhes;
    DetailsOnDemandVisao details;
    private boolean desenhouContinuousGlyph;
    private GlyphMB glyphMB;
    private SetUpMB setupMB;

    private void atualizarLegendaCategoricalGlyphs(ArrayList<Object> atributosEscolhidosGlyph) {
        painelLegendaVis.removeAll();
        atualizarLegendaTreemap(itemCor);
        legendaVisualizacao.setAtributosGlyphs(atributosEscolhidosGlyph);
        for (int i = 0; i < atributosEscolhidosGlyph.size(); i++) {
            if (!atributosEscolhidosGlyph.get(i).equals("---")) {
                JPanel painelDimensao = legendaVisualizacao.addLegendaDimensao(i);
                painelLegendaVis.setLayout(new BoxLayout(painelLegendaVis, BoxLayout.Y_AXIS));
                painelLegendaVis.add(painelDimensao);
            }
            painelLegendaVis.revalidate();
        }
    }

    private boolean atualizarLegendaGlyphsContinuos(String[] atributosEscolhidosGlyphContinuo) {
        boolean atualizado = false;
        try {
            painelLegendaVis.removeAll();
            atualizarLegendaTreemap(itemCor);
            atualizarLegendaCategoricalGlyphs(atributosEscolhidosGlyph);
            ArrayList<String> lista = new ArrayList();
            //converndo lista<object>
            for (int i = 0; i < atributosEscolhidosGlyphContinuo.length; i++) {
                lista.add(atributosEscolhidosGlyphContinuo[i]);
            }
//        legendaVisualizacao.setAtributosGlyphs(lista);
            legendaVisualizacao.setAtributosGlyphsontinuos(lista);
//        for (int i = 0; i < atributosEscolhidosGlyphContinuo.size(); i++) {   
            JPanel painelDimensao = legendaVisualizacao.addLegendaDimensao(5);
            painelLegendaVis.setLayout(new BoxLayout(painelLegendaVis, BoxLayout.Y_AXIS));
            painelLegendaVis.add(painelDimensao);

            painelLegendaVis.revalidate();
            atualizado = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return atualizado;
    }

    private void atualizarLegendaTreemap(String itemCor) {
        painelLegendaVis.removeAll();
        if (!itemCor.equals("---")) {
            JPanel painelDimensao = legendaVisualizacao.addLegendaCorTreemap(itemCor);
            painelLegendaVis.add(painelDimensao);
        }
    }

    private boolean verificarGlyphCategoricoAtivo() {
        Constantes.CATEGORICAL_GLYPH_ACTIVATED = false;
        if (checkCategoricalGlyph.isSelected()) {
            Constantes.CATEGORICAL_GLYPH_ACTIVATED = true;
        }
        return Constantes.CATEGORICAL_GLYPH_ACTIVATED;
    }

    private boolean verificarStatusGlyphContinuo() {
        Constantes.CONTINUOUS_GLYPH_ACTIVATED = false;
        if (checkContinuousGlyph.isSelected()) {
            Constantes.CONTINUOUS_GLYPH_ACTIVATED = true;
        }
        return Constantes.CONTINUOUS_GLYPH_ACTIVATED;
    }

    private void cleanCacheCategoricalGlyph() {
        botaoGerarCategoricalGlyphs.setEnabled(verificarGlyphCategoricoAtivo());

        cleanCacheClickPanel();

        if (glassPanel != null) {//se existe glassPanel entao apaga ele
            glassPanel.setVisible(false);
            layerPane.remove(glassPanel);
            glassPanel = null;
        }
        if (!verificarGlyphCategoricoAtivo()) {
            varVisuaisList1.setEnabled(false);
            varVisuaisList2.setEnabled(false);
            Object[] vazio = {};
            DefaultComboBoxModel emptyList = new DefaultComboBoxModel(vazio);
            varVisuaisList2.setModel(emptyList);
            varVisuaisList1.setModel(emptyList);
            Object[] newList = new Object[5];
            newList[0] = "Texture";
            newList[1] = "Color";
            newList[2] = "Shape";
            newList[3] = "Text";
            newList[4] = "Position";
            DefaultComboBoxModel model = new DefaultComboBoxModel(newList);
            varVisuaisList1.setModel(model);
            textureGlyphComboBox.setEnabled(false);
            colorGlyphComboBox.setEnabled(false);
            shapeGlyphComboBox.setEnabled(false);
            textGlyphComboBox.setEnabled(false);
            positionGlyphComboBox.setEnabled(false);
        }

        if (!checkCategoricalGlyph.isSelected() && !checkContinuousGlyph.isSelected()) {
            showGlyphOnDetailsCheckBox.setEnabled(false);
        }
        painelLegendaVis.removeAll();
        painelLegendaVis.repaint();
    }

    public void cleanCacheContinuousGlyph() {
        botaoGerarContinuosGlyphs.setEnabled(verificarStatusGlyphContinuo());

        cleanCacheClickPanel();

        if (glassPanel != null) {//se existe glassPanel entao apaga ele
            glassPanel.setVisible(false);
            layerPane.remove(glassPanel);
            glassPanel = null;
        }
        if (!verificarStatusGlyphContinuo()) {
            listaAtributosContinuousGlyph.setEnabled(false);
            listaAtributosContinuousGlyph2.setEnabled(false);
            glyphContinuosType.setSelectedIndex(0);
            glyphContinuosType.setEnabled(false);
            Object[] vazio = {};
            DefaultComboBoxModel emptyList = new DefaultComboBoxModel(vazio);
            listaAtributosContinuousGlyph.setModel(emptyList);
            listaAtributosContinuousGlyph2.setModel(emptyList);
        }

        if (!checkCategoricalGlyph.isSelected() && !checkContinuousGlyph.isSelected()) {
            showGlyphOnDetailsCheckBox.setEnabled(false);
        }

        painelLegendaVis.removeAll();
        painelLegendaVis.repaint();
    }

    public void cleanCacheClickPanel() {
        if (clickPanel != null) {
            clickPanel.setVisible(false);
            layerPane.remove(clickPanel);
            clickPanel = null;
            glyphMB = null;
        }
    }

    public void loadAtributosDetalhes() {
        List<String> itens = new ArrayList<>();
        List<String> itens2 = new ArrayList<>();
        for (String cabecalho : manipulador.getCabecalho()) {
            itens.add(cabecalho);
        }
        for (int i = 0; i < 3; i++) {
            String itemRemovido = itens.remove(0);
            itens2.add(itemRemovido);
        }
        itens.remove(itens.size() - 1);

        reloadListGUI(itens.toArray(), colunasDetalhesList1);
        reloadListGUI(itens2.toArray(), colunasDetalhesList2);
        colunasDetalhesList1.setEnabled(true);
        colunasDetalhesList2.setEnabled(true);
    }

    private void limparResquiciosBasesAnteriores() {
        limparPainelEsquerda();
        checkCategoricalGlyph.setEnabled(false);
        checkContinuousGlyph.setEnabled(false);
        cleanCacheCategoricalGlyph();
        cleanCacheContinuousGlyph();
        painelLegendaVis.removeAll();
        Object[] vazio = {};
        DefaultComboBoxModel model = new DefaultComboBoxModel(vazio);
        colunasHierarquicasList2.setModel(model);
        listaAtributosContinuousGlyph2.setModel(model);
    }

    private void habilitarVarVisuaisUtilizadasGUI(List<String> variaveis) {
        for (String var : variaveis) {            
            switch (var) {
                case "Texture":
                    textureGlyphComboBox.setEnabled(true);
                    break;
                case "Color":
                    colorGlyphComboBox.setEnabled(true);
                    break;
                case "Shape":
                    shapeGlyphComboBox.setEnabled(true);
                    break;
                case "Text"://case "Letter":
                    textGlyphComboBox.setEnabled(true);
                    break;
                case "Position":
                    positionGlyphComboBox.setEnabled(true);
                    break;
            }
        }
    }

    private void desabilitarVarVisuaisUtilizadasGUI(List<String> variaveis) {
        for (String var : variaveis) {
            switch (var) {
                case "Texture":
                    textureGlyphComboBox.setEnabled(false);
                    textureGlyphComboBox.setSelectedIndex(0);
                    break;
                case "Color":
                    colorGlyphComboBox.setEnabled(false);
                    colorGlyphComboBox.setSelectedIndex(0);
                    break;
                case "Shape":
                    shapeGlyphComboBox.setEnabled(false);
                    shapeGlyphComboBox.setSelectedIndex(0);
                    break;
                case "Text"://case "Letter":
                    textGlyphComboBox.setEnabled(false);
                    textGlyphComboBox.setSelectedIndex(0);
                    break;
                case "Number":
//                    atributo5Glyph.setEnabled(false);
//                    atributo5Glyph.setSelectedIndex(0);
                    break;
            }
        }
    }

    private void loadSetupTreemap() {
        itemTamanho = tamanhoTreemapComboBox.getSelectedItem().toString();
        itemLegenda = legendaComboBox.getSelectedItem().toString();
        itemCor = corTreemapComboBox.getSelectedItem().toString();
        itensHierarquia = Util.parseListModel2ArrayString(colunasHierarquicasList2.getModel());
        itensDetalhes = Util.parseListModel2ArrayString(colunasDetalhesList2.getModel());
        for (TreeMapItem treeMapItem : manipulador.getItensTreemap()) {
            treeMapItem.setHighLight(false);
        }
    }

    private void configDetalhesSobDemanda() {
        clickPanel.setOnMouseOverListener(new GlassPanelClick.OnMouseOver() {
            @Override
            public void getDetailsOnDemand(MouseEvent evt) {
                itensDetalhes = Util.parseListModel2ArrayString(colunasDetalhesList2.getModel());
                //detalhes sob demanda original da api do treemap
//                if (detailsOnDemandCheckBox.isSelected()) {
//                    view.dispatchEvent(evt);
//                }
            }

            @Override
            public String tooltipEvent(MouseEvent evt) {
                return view.getToolTipText(evt);
            }

            @Override
            public void move(MouseEvent evt) {
                Point locationOnScreen = evt.getLocationOnScreen();

                if ((locationOnScreen.getY() + details.getHeight()) > (view.getHeight())) {
                    if (showGlyphOnDetailsCheckBox.isSelected()) {
                        locationOnScreen.translate(15, -60);
                    } else {
                        locationOnScreen.translate(15, -50);
                    }
                } else {
                    locationOnScreen.translate(15, 5);
                }
                details.setLocation(locationOnScreen);

                details.getGlyphIconLabel().setVisible(showGlyphOnDetailsCheckBox.isSelected());
                TreeMapNode nodeUnderTheMouse = (TreeMapNode) view.getNodeUnderTheMouse(evt);
                if (showGlyphOnDetailsCheckBox.isSelected()) {
                    if (nodeUnderTheMouse instanceof TreeMapItem) {
                        if (nodeUnderTheMouse.getGlyph() != null) {
                            if (!nodeUnderTheMouse.getGlyph().getChildren().isEmpty()) {
                                if (Constantes.DECISION_TREE_ACTIVATED) {
                                    ((TreeMapItem) nodeUnderTheMouse).getWhat2Draw()[Constantes.PRESENCA_TEXTURA] = 1;
                                    ((TreeMapItem) nodeUnderTheMouse).getWhat2Draw()[Constantes.PRESENCA_COR] = 1;
                                    ((TreeMapItem) nodeUnderTheMouse).getWhat2Draw()[Constantes.PRESENCA_FORMA] = 1;
                                    ((TreeMapItem) nodeUnderTheMouse).getWhat2Draw()[Constantes.PRESENCA_LETRA] = 1;
                                }
                                details.getDetailsMB().setGlyphOnToolTip(nodeUnderTheMouse.getGlyph());
                                details.updateGlyphIcon(true);
                                details.setSize(240, 127);
                            }
                        }
                    } else {
                        details.updateGlyphIcon(false);
                    }
                } else {
//                    details.getGlyphIconLabel().setVisible(false);
                    details.setSize(details.getDetalhesTextPane().getWidth(), details.getDetalhesTextPane().getHeight());
                }
                details.setVisible(true);
                details.getDetailsMB().setColunasDetalhesDemanda(itensDetalhes);
                details.getDetalhesTextPane().setText("");//limpando o quadro dos detalhes sob demanda
                String tooltipText = details.getDetailsMB().getTooltipOfObject(nodeUnderTheMouse).toString();

                details.getDetalhesTextPane().setEditable(true);

                Util.appendToPane(details.getDetalhesTextPane(), tooltipText, Color.decode("#000000"), StyleConstants.ALIGN_JUSTIFIED, 10);

                details.getDetalhesTextPane().setEditable(false);
            }

            @Override
            public void exit(MouseEvent evt) {
                details.setVisible(false);
            }
        });
    }

    private boolean esqueceuSelecionarAtributo() {
        boolean esqueceu = false;

        for (int i = 0; i < variaveisVisuaisEscolhidas.length; i++) {
            String var = variaveisVisuaisEscolhidas[i];
            switch (var) {
                case "Texture":
                    if (textureGlyphComboBox.getSelectedIndex() == 0) {
                        esqueceu = true;
                    }
                    break;
                case "Color":
                    if (colorGlyphComboBox.getSelectedIndex() == 0) {
                        esqueceu = true;
                    }
                    break;
                case "Shape":
                    if (shapeGlyphComboBox.getSelectedIndex() == 0) {
                        esqueceu = true;
                    }
                    break;
                case "Text":
                    if (textGlyphComboBox.getSelectedIndex() == 0) {
                        esqueceu = true;
                    }
                    break;
            }
        }
        return esqueceu;
    }

    private void createGlassPanel() {
        if (glassPanel == null) {
            glassPanel = new GlassPanel();
            if (glyphMB != null) {
                glassPanel.setGlyphMB(glyphMB);
            }
            glassPanel.setTMView(view);
            layerPane.add(glassPanel, new Integer(1), 0);
        }
    }

    private void cleanAllVisualizations() {
        visualizationTreemap = null;
        view = null;
//        clickPanel = null;
        cleanCacheClickPanel();

        limparPainelEsquerda();

        checkCategoricalGlyph.setSelected(false);
        cleanCacheCategoricalGlyph();

        checkContinuousGlyph.setSelected(false);
        cleanCacheContinuousGlyph();

        showGlyphOnDetailsCheckBox.setSelected(false);
        showGlyphOnDetailsCheckBox.setEnabled(false);
    }

    /**
     * Metodo que recebe uma BufferedImage (screenshot) e a salva no disco
     *
     * @param captureImage screenshot de um componente
     */
    private void saveScreenShot(BufferedImage captureImage) {
        String format = "png";
        String fileName = "screenshot." + format;
        try {
            ImageIO.write(captureImage, format, new File(fileName));//salvando no disco
            System.out.println("salvou...");
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            System.err.println(ex);
        }
    }

    /**
     * Metodo que recebe um componente para pegar sua screenshot
     *
     * @param component
     * @return A BufferedImage com a screenshot do component
     */
    private BufferedImage captureComponent(Component component) {
        Rectangle rect = component.getBounds();

        BufferedImage captureImage;

        captureImage = new BufferedImage(rect.width, rect.height, BufferedImage.TYPE_INT_ARGB);
        component.paint(captureImage.getGraphics());

        return captureImage;
    }

    /**
     * This method combine 2 images. It paint both images (img1 and img2),
     * preserving the alpha channels
     *
     * @param img1
     * @param img2
     */
    private void combiningBufferedImages(BufferedImage img1, BufferedImage img2, BufferedImage result) {
        Graphics g = result.getGraphics();
        g.drawImage(img1, 0, 0, null);
        g.drawImage(img2, 0, 0, null);
    }

    private void configGlassPanelClick() {
        if (clickPanel == null) {
            clickPanel = new GlassPanelClick();
            clickPanel.setTMView(view);
            clickPanel.setListaItensClicados(visualizationTreemap.getNodosSelecionadosUsuario());
            clickPanel.setBounds(view.getBounds());
            layerPane.add(view, new Integer(0), 0);
            layerPane.add(clickPanel, new Integer(1), 0);

            clickPanel.setOnClickListener((MouseEvent evt1) -> {
                view.dispatchEvent(evt1);
            });
            clickPanel.repaint();
        }
    }

    class Task extends SwingWorker<Void, Void> {

        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() {
            int progress = 0;
            //Initialize progress property.
            setProgress(0);
            int ordem = 0;
            while (progress < 100) {
                //Sleep for up to one second.
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ignore) {
                    ignore.printStackTrace();
                }
                //Make progress.     
                ordem++;
                progress = executaTarefas(ordem, progress);
                setProgress(Math.min(progress, 100));
            }
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            setCursor(null); //turn off the wait cursor
        }
    }

    private int executaTarefas(int ordem, int porcentagem) {
        int tarefas = 13;
        switch (ordem) {
            case 1:
                logger.info("Leitura do arquivo.");
                manipulador = new ManipuladorArquivo();
                manipulador.lerArquivo(selectedFile);
                setupMB.setManipulador(manipulador);
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Tratando arquivo: " + porcentagem + "%");
                break;
            case 2:
                try {
                    logger.info("Montando Objetos coluna.");
                    manipulador.montarColunas(manipulador.getCabecalho(), manipulador.getTipos());
                } catch (Exception e) {
                    logger.error("Erro montar objetos COLUNA. \n", e);
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Montando colunas: " + porcentagem + "%");
                break;
            case 3:
                try {
                    logger.info("Carregando itens no treemap e define um GlyphConcreto a cada item.");
                    manipulador.carregarItensTreemap();
                } catch (Throwable e) {
                    logger.error("Erro ao criar itens no treemap. \n", e);
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando itens no TreeMap: " + porcentagem + "%");
                break;
            case 4:
                try {
                    logger.info("Definindo a descrição das colunas.");
                    for (int i = 0; i < manipulador.getColunas().length; i++) {
                        Coluna c = manipulador.getColunas()[i];
                        if (c != null) {
                            c.configurarDescricao(manipulador.getDadosColuna(manipulador.getCabecalho()[i]));
                        } else {
                            throw new Exception();
                        }
                    }
                } catch (Exception e) {
                    logger.error("Erro ao definir a descrição das colunas. \n", e);
                    JOptionPane.showMessageDialog(null,
                            "There was an error reading your file. \nPlease, "
                            + "make sure your file is set up correctly \n"
                            + "and try again. \n"
                            + "-Make sure your file has headers (Column Name and Data Type, each in a row, first Column Name then Data Type) \n"
                            + "-Data types are written with the first letter uppercase and the rest lowercase (e.g. String, Double) \n"
                            + "-The accepted data types are: Integer, Double, String, Float, Boolean",
                            "There is a problem with your file !.",
                            JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    break;
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Definindo a descrição das colunas: " + porcentagem + "%");
                break;
            case 5:
                logger.info("Preparando atributos contínuos.");
                setupMB.loadContinuousAttributes();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando atributos contínuos: " + porcentagem + "%");
                break;
            case 6:
                logger.info("Preparando atributos categóricos.");
                setupMB.loadCategorialAttributes();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando atributos categóricos: " + porcentagem + "%");
                break;
            case 7:
                logger.info("Preparando lista tamanho para o treemap.");
                loadItensTamanhoTreemap();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando lista tamanho: " + porcentagem + "%");
                break;
            case 8:
                logger.info("Preparando lista legenda para o treemap.");
                loadItensLegendaTreemap();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando lista legenda: " + porcentagem + "%");
                break;
            case 9:
                logger.info("Preparando variáveis glyphs.");
                setupMB.loadVariaveisGlyph(setupMB.getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_1, true), textureGlyphComboBox);
                setupMB.loadVariaveisGlyph(setupMB.loadColorAttributes2Glyphs(), colorGlyphComboBox);
                setupMB.loadVariaveisGlyph(setupMB.getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_3, true), shapeGlyphComboBox);
                setupMB.loadVariaveisGlyph(setupMB.getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_4, true), textGlyphComboBox);
                setupMB.loadVariaveisGlyph(setupMB.loadPositionAttributes2Glyphs(), positionGlyphComboBox);

                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis glyph: " + porcentagem + "%");
                break;
            case 10:
                logger.info("Preparando variáveis hierarquia para o treemap.");
                loadItensHierarquiaTreemap(setupMB.getAtributosCategoricos().toArray());
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis hierarquia Treemap: " + porcentagem + "%");
                break;
            case 11:
                logger.info("Preparando variáveis Cores para o treemap.");
//                loadItensCoresTreemap(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_2, false));
                loadItensCoresTreemap(setupMB.loadColorAttributesTreemap());
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis cores Treemap: " + porcentagem + "%");
                break;
            case 12:
                logger.info("Preparando variáveis para Detalhes sob Demanda para o treemap.");
                loadAtributosDetalhes();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis para Detalhes sob Demanda: " + porcentagem + "%");
                break;
            case 13:
                logger.info("Preparando atributos para o continuous glyph.");
                setupMB.getAtributosContinuos().remove(setupMB.getAtributosContinuos().size() - 1);
                loadItensContinuouGlyph(setupMB.getAtributosContinuos().toArray());
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando atributos para o continuous glyph: " + porcentagem + "%");
                break;
            default:
                throw new AssertionError();
        }
        return porcentagem;
    }

    private void limparPainelEsquerda() {
        painelEsquerda.removeAll();
        painelEsquerda.repaint();
    }

    private void loadItensTamanhoTreemap() {
        atualizarComboBox(tamanhoTreemapComboBox, setupMB.getAtributosContinuos());
        tamanhoTreemapComboBox.setEnabled(true);
    }

    private void loadItensLegendaTreemap() {
        List<String> itens = new ArrayList<>();
        itens.addAll(Arrays.asList(manipulador.getCabecalho()));
        itens.remove(manipulador.getCabecalho().length - 1);
        atualizarComboBox(legendaComboBox, itens);
        botaoGerarTreemap.setEnabled(true);
    }

    private void loadItensHierarquiaTreemap(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        colunasHierarquicasList1.setModel(model);
        colunasHierarquicasList1.setEnabled(true);
    }

    private void loadItensDetalhes(Object[] objs) {
        reloadListGUI(objs, colunasDetalhesList1);
        colunasDetalhesList1.setEnabled(true);
    }

    private void loadItensContinuouGlyph(Object[] objs) {
        reloadListGUI(objs, listaAtributosContinuousGlyph);
    }

    private void loadItensCoresTreemap(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        corTreemapComboBox.setModel(model);
        corTreemapComboBox.setEnabled(true);
    }

    private void atualizarComboBox(JComboBox comboBox, List<String> itens) {
        Object[] items = itens.toArray();
        DefaultComboBoxModel model = new DefaultComboBoxModel(items);
        comboBox.setModel(model);
    }

    private void loadVarVisuais(Object[] objs) {
        reloadListGUI(objs, varVisuaisList1);
        varVisuaisList1.setEnabled(true);
    }

    private void reloadListGUI(Object[] objs, JList<String> jList) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        jList.setModel(model);
    }

    /**
     * Invoked when task's progress property changes.
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (Constantes.PROGRESS.equals(evt.getPropertyName())) {
            int progress = (Integer) evt.getNewValue();
            progressoBarra.setValue(progress);
        }
    }
}
