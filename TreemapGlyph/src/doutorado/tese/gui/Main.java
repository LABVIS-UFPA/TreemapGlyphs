/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doutorado.tese.gui;

import doutorado.tese.io.ManipuladorArquivo;
import doutorado.tese.util.Coluna;
import doutorado.tese.util.Constantes;
import doutorado.tese.legenda.LegendaVisualizacao;
import doutorado.tese.util.Metadados;
import doutorado.tese.visualizacao.glyph.StarGlyph;
import doutorado.tese.visualizacao.glyph.formasgeometricas.GeometryFactory;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;import net.bouthier.treemapAWT.TMView;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author Anderson
 */
public class Main extends javax.swing.JFrame implements PropertyChangeListener {

    private static final Logger logger = LogManager.getLogger(Main.class);

    /**
     * Creates new form Main
     */
    public Main() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            logger.info(Main.class.getName());//.log(Level.SEVERE, null, ex);
        }
        initComponents();
        jSplitPane1.setDividerLocation(2000);
        layerPane = new JLayeredPane();

        legendaVisualizacao = new LegendaVisualizacao(painelLegendaVis.getBounds());
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
//        msgFeedback.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        painelEsquerda = new javax.swing.JPanel();
        painelDireita = new javax.swing.JPanel();
        progressoBarra = new javax.swing.JProgressBar();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        abaTreemap = new javax.swing.JPanel();
        botaoGerarVisualizacao = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        colunasHierarquicasList = new javax.swing.JList<>();
        inserirBotao_treemap = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        colunasHierarquicasList2 = new javax.swing.JList<>();
        cimaBotao_treemap = new javax.swing.JButton();
        baixoBotao_treemap = new javax.swing.JButton();
        removerBotao_treemap = new javax.swing.JButton();
        checkLegenda = new javax.swing.JCheckBox();
        legendaComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        tamanhoTreemapComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        corTreemapComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        abaConfigGlyphs = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        varVisuaisList = new javax.swing.JList<>();
        inserirVarVisualButton = new javax.swing.JButton();
        removerVarVisualButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        varVisuaisEscolidasList = new javax.swing.JList<>();
        cimaButton = new javax.swing.JButton();
        baixoButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        atributo1Glyph = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        atributo2Glyph = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        atributo3Glyph = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        atributo4Glyph = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        atributo5Glyph = new javax.swing.JComboBox<>();
        botaoGerarGlyphs = new javax.swing.JButton();
        checkGlyph = new javax.swing.JCheckBox();
        abaStarGlyphs = new javax.swing.JPanel();
        checkStarGlyph1 = new javax.swing.JCheckBox();
        botaoGerarStarGlyphs = new javax.swing.JButton();
        inserirVarVisualButton2 = new javax.swing.JButton();
        removerVarVisualButton2 = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        listaAtributos2 = new javax.swing.JList<>();
        jScrollPane10 = new javax.swing.JScrollPane();
        painelLegenda = new javax.swing.JTextPane();
        cimaButton2 = new javax.swing.JButton();
        baixoButton2 = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        listaAtributos1 = new javax.swing.JList<>();
        abaDetalhes = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        colunasDetalhesList1 = new javax.swing.JList<>();
        inserirBotao_detalhes = new javax.swing.JButton();
        removerBotao_detalhes = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        colunasDetalhesList2 = new javax.swing.JList<>();
        jLabel12 = new javax.swing.JLabel();
        updateDetailsButton = new javax.swing.JButton();
        abaFiltros = new javax.swing.JPanel();
        legendaBarraRolage = new javax.swing.JScrollPane();
        GridLayout grid = new GridLayout(0, 1);
        painelLegendaVis = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileMenuItem = new javax.swing.JMenuItem();
        decisionTreeMenu = new javax.swing.JMenu();
        decisionTreeActivate = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Treemap Glyphs");

        jSplitPane1.setDividerLocation(1000);
        jSplitPane1.setOpaque(false);

        painelEsquerda.setBackground(new java.awt.Color(153, 255, 153));
        painelEsquerda.setOpaque(false);

        javax.swing.GroupLayout painelEsquerdaLayout = new javax.swing.GroupLayout(painelEsquerda);
        painelEsquerda.setLayout(painelEsquerdaLayout);
        painelEsquerdaLayout.setHorizontalGroup(
            painelEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 999, Short.MAX_VALUE)
        );
        painelEsquerdaLayout.setVerticalGroup(
            painelEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 644, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(painelEsquerda);

        painelDireita.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        progressoBarra.setName("teste"); // NOI18N
        progressoBarra.setStringPainted(true);

        botaoGerarVisualizacao.setText("View Treemap");
        botaoGerarVisualizacao.setEnabled(false);
        botaoGerarVisualizacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarVisualizacaoActionPerformed(evt);
            }
        });

        jLabel2.setText("Group Hierarchy:");

        colunasHierarquicasList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasHierarquicasListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(colunasHierarquicasList);

        inserirBotao_treemap.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        inserirBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirBotao_treemap.setEnabled(false);
        inserirBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirBotao_treemapActionPerformed(evt);
            }
        });

        colunasHierarquicasList2.setEnabled(false);
        colunasHierarquicasList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasHierarquicasList2ValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(colunasHierarquicasList2);

        cimaBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaUp.png"))); // NOI18N
        cimaBotao_treemap.setEnabled(false);
        cimaBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cimaBotao_treemapActionPerformed(evt);
            }
        });

        baixoBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDown.png"))); // NOI18N
        baixoBotao_treemap.setEnabled(false);
        baixoBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baixoBotao_treemapActionPerformed(evt);
            }
        });

        removerBotao_treemap.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        removerBotao_treemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerBotao_treemap.setEnabled(false);
        removerBotao_treemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBotao_treemapActionPerformed(evt);
            }
        });

        checkLegenda.setText("Label:");
        checkLegenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkLegendaActionPerformed(evt);
            }
        });

        legendaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        legendaComboBox.setToolTipText("");
        legendaComboBox.setEnabled(false);

        jLabel1.setText("Size:");

        tamanhoTreemapComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        tamanhoTreemapComboBox.setEnabled(false);

        jLabel4.setText("Color:");

        corTreemapComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        corTreemapComboBox.setEnabled(false);
        corTreemapComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                corTreemapComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Available Attributes:");

        javax.swing.GroupLayout abaTreemapLayout = new javax.swing.GroupLayout(abaTreemap);
        abaTreemap.setLayout(abaTreemapLayout);
        abaTreemapLayout.setHorizontalGroup(
            abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaTreemapLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abaTreemapLayout.createSequentialGroup()
                        .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(abaTreemapLayout.createSequentialGroup()
                                .addComponent(checkLegenda)
                                .addGap(18, 18, 18)
                                .addComponent(legendaComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, abaTreemapLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addGap(23, 23, 23)
                                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tamanhoTreemapComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(corTreemapComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(74, 74, 74))
                    .addGroup(abaTreemapLayout.createSequentialGroup()
                        .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inserirBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removerBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(abaTreemapLayout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cimaBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(baixoBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2)))
                    .addComponent(botaoGerarVisualizacao, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );
        abaTreemapLayout.setVerticalGroup(
            abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaTreemapLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(abaTreemapLayout.createSequentialGroup()
                        .addComponent(cimaBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(baixoBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addGroup(abaTreemapLayout.createSequentialGroup()
                        .addComponent(inserirBotao_treemap, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removerBotao_treemap, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(legendaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkLegenda))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tamanhoTreemapComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaTreemapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(corTreemapComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoGerarVisualizacao, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Treemap", abaTreemap);

        jLabel13.setText("Visual variables:");

        varVisuaisList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Texture", "Color", "Shape", "Letter", "Number","Star" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        varVisuaisList.setEnabled(false);
        varVisuaisList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                varVisuaisListValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(varVisuaisList);

        inserirVarVisualButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirVarVisualButton.setEnabled(false);
        inserirVarVisualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirVarVisualButtonActionPerformed(evt);
            }
        });

        removerVarVisualButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerVarVisualButton.setEnabled(false);
        removerVarVisualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerVarVisualButtonActionPerformed(evt);
            }
        });

        jLabel14.setText("Order:");

        varVisuaisEscolidasList.setToolTipText("");
        varVisuaisEscolidasList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                varVisuaisEscolidasListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(varVisuaisEscolidasList);

        cimaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaUp.png"))); // NOI18N
        cimaButton.setEnabled(false);
        cimaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cimaButtonActionPerformed(evt);
            }
        });

        baixoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDown.png"))); // NOI18N
        baixoButton.setEnabled(false);
        baixoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baixoButtonActionPerformed(evt);
            }
        });

        jLabel15.setText("Available Attributes:");

        jLabel7.setText("Texture:");

        atributo1Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo1Glyph.setEnabled(false);
        atributo1Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo1GlyphItemStateChanged(evt);
            }
        });
        atributo1Glyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atributo1GlyphActionPerformed(evt);
            }
        });

        jLabel8.setText("Color:");

        atributo2Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo2Glyph.setEnabled(false);
        atributo2Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo2GlyphItemStateChanged(evt);
            }
        });

        jLabel9.setText("Shape:");

        atributo3Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo3Glyph.setEnabled(false);
        atributo3Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo3GlyphItemStateChanged(evt);
            }
        });
        atributo3Glyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atributo3GlyphActionPerformed(evt);
            }
        });

        jLabel10.setText("Letter:");

        atributo4Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo4Glyph.setEnabled(false);
        atributo4Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo4GlyphItemStateChanged(evt);
            }
        });

        jLabel11.setText("Number:");

        atributo5Glyph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));
        atributo5Glyph.setEnabled(false);
        atributo5Glyph.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                atributo5GlyphItemStateChanged(evt);
            }
        });

        botaoGerarGlyphs.setText("View Glyphs");
        botaoGerarGlyphs.setEnabled(false);
        botaoGerarGlyphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarGlyphsActionPerformed(evt);
            }
        });

        checkGlyph.setText("Glyph");
        checkGlyph.setEnabled(false);
        checkGlyph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkGlyphActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout abaConfigGlyphsLayout = new javax.swing.GroupLayout(abaConfigGlyphs);
        abaConfigGlyphs.setLayout(abaConfigGlyphsLayout);
        abaConfigGlyphsLayout.setHorizontalGroup(
            abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                                .addGap(55, 55, 55))
                            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                                .addComponent(checkGlyph, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63))
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(atributo2Glyph, 0, 96, Short.MAX_VALUE)
                            .addComponent(atributo5Glyph, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(atributo1Glyph, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(botaoGerarGlyphs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(jLabel9))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaConfigGlyphsLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel10)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(atributo3Glyph, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(atributo4Glyph, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(removerVarVisualButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inserirVarVisualButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cimaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(baixoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        abaConfigGlyphsLayout.setVerticalGroup(
            abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaConfigGlyphsLayout.createSequentialGroup()
                        .addComponent(checkGlyph)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel13)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removerVarVisualButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaConfigGlyphsLayout.createSequentialGroup()
                            .addComponent(cimaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(baixoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(inserirVarVisualButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35)
                .addComponent(jLabel15)
                .addGap(32, 32, 32)
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(atributo3Glyph)
                            .addComponent(atributo1Glyph))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(atributo4Glyph)))
                    .addGroup(abaConfigGlyphsLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(atributo2Glyph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaConfigGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(atributo5Glyph)
                    .addComponent(botaoGerarGlyphs))
                .addGap(89, 89, 89))
        );

        jTabbedPane1.addTab("Config Glyphs", abaConfigGlyphs);

        checkStarGlyph1.setText("Star Glyph");
        checkStarGlyph1.setEnabled(false);
        checkStarGlyph1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkStarGlyph1ActionPerformed(evt);
            }
        });

        botaoGerarStarGlyphs.setText("View Glyphs");
        botaoGerarStarGlyphs.setEnabled(false);
        botaoGerarStarGlyphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarStarGlyphsActionPerformed(evt);
            }
        });

        inserirVarVisualButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirVarVisualButton2.setEnabled(false);
        inserirVarVisualButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirVarVisualButton2ActionPerformed(evt);
            }
        });

        removerVarVisualButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerVarVisualButton2.setEnabled(false);
        removerVarVisualButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerVarVisualButton2ActionPerformed(evt);
            }
        });

        listaAtributos2.setToolTipText("");
        listaAtributos2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaAtributos2ValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(listaAtributos2);

        painelLegenda.setEditable(false);
        painelLegenda.setBorder(javax.swing.BorderFactory.createTitledBorder("Subtitle StarGlyph"));
        jScrollPane10.setViewportView(painelLegenda);

        cimaButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaUp.png"))); // NOI18N
        cimaButton2.setEnabled(false);
        cimaButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cimaButton2ActionPerformed(evt);
            }
        });

        baixoButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDown.png"))); // NOI18N
        baixoButton2.setEnabled(false);
        baixoButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baixoButton2ActionPerformed(evt);
            }
        });

        listaAtributos1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaAtributos1ValueChanged(evt);
            }
        });
        jScrollPane11.setViewportView(listaAtributos1);

        javax.swing.GroupLayout abaStarGlyphsLayout = new javax.swing.GroupLayout(abaStarGlyphs);
        abaStarGlyphs.setLayout(abaStarGlyphsLayout);
        abaStarGlyphsLayout.setHorizontalGroup(
            abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaStarGlyphsLayout.createSequentialGroup()
                .addGroup(abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abaStarGlyphsLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkStarGlyph1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botaoGerarStarGlyphs, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, abaStarGlyphsLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inserirVarVisualButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removerVarVisualButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cimaButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(baixoButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        abaStarGlyphsLayout.setVerticalGroup(
            abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaStarGlyphsLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(checkStarGlyph1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(abaStarGlyphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(abaStarGlyphsLayout.createSequentialGroup()
                            .addComponent(cimaButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(20, 20, 20)
                            .addComponent(baixoButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(abaStarGlyphsLayout.createSequentialGroup()
                            .addComponent(inserirVarVisualButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(20, 20, 20)
                            .addComponent(removerVarVisualButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botaoGerarStarGlyphs)
                .addGap(50, 50, 50))
        );

        jTabbedPane1.addTab("StarGlyph", abaStarGlyphs);

        jLabel6.setText("Available Attributes:");

        colunasDetalhesList1.setEnabled(false);
        colunasDetalhesList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasDetalhesList1ValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(colunasDetalhesList1);

        inserirBotao_detalhes.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        inserirBotao_detalhes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirBotao_detalhes.setEnabled(false);
        inserirBotao_detalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirBotao_detalhesActionPerformed(evt);
            }
        });

        removerBotao_detalhes.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        removerBotao_detalhes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerBotao_detalhes.setEnabled(false);
        removerBotao_detalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBotao_detalhesActionPerformed(evt);
            }
        });

        colunasDetalhesList2.setEnabled(false);
        colunasDetalhesList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colunasDetalhesList2ValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(colunasDetalhesList2);

        jLabel12.setText("Details on Demand:");

        updateDetailsButton.setText("Update Details");
        updateDetailsButton.setEnabled(false);
        updateDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDetailsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout abaDetalhesLayout = new javax.swing.GroupLayout(abaDetalhes);
        abaDetalhes.setLayout(abaDetalhesLayout);
        abaDetalhesLayout.setHorizontalGroup(
            abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaDetalhesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(updateDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(abaDetalhesLayout.createSequentialGroup()
                        .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inserirBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removerBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        abaDetalhesLayout.setVerticalGroup(
            abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(abaDetalhesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(abaDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(abaDetalhesLayout.createSequentialGroup()
                        .addComponent(inserirBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removerBotao_detalhes, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(jScrollPane6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Details", abaDetalhes);

        javax.swing.GroupLayout abaFiltrosLayout = new javax.swing.GroupLayout(abaFiltros);
        abaFiltros.setLayout(abaFiltrosLayout);
        abaFiltrosLayout.setHorizontalGroup(
            abaFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 325, Short.MAX_VALUE)
        );
        abaFiltrosLayout.setVerticalGroup(
            abaFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 386, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Filter", abaFiltros);

        legendaBarraRolage.setBackground(new java.awt.Color(255, 255, 255));
        legendaBarraRolage.setBorder(null);

        painelLegendaVis.setLayout(grid);

        legendaBarraRolage.setViewportView(painelLegendaVis);

        javax.swing.GroupLayout painelDireitaLayout = new javax.swing.GroupLayout(painelDireita);
        painelDireita.setLayout(painelDireitaLayout);
        painelDireitaLayout.setHorizontalGroup(
            painelDireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelDireitaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressoBarra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, Short.MAX_VALUE)
            .addComponent(legendaBarraRolage)
        );
        painelDireitaLayout.setVerticalGroup(
            painelDireitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDireitaLayout.createSequentialGroup()
                .addComponent(progressoBarra, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(legendaBarraRolage, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(painelDireita);

        fileMenu.setText("File");

        fileMenuItem.setText("File");
        fileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuItem);

        jMenuBar1.add(fileMenu);

        decisionTreeMenu.setText("Adaptative Glyph");
        decisionTreeMenu.setToolTipText("");

        decisionTreeActivate.setText("Activate");
        decisionTreeActivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decisionTreeActivateActionPerformed(evt);
            }
        });
        decisionTreeMenu.add(decisionTreeActivate);

        jMenuBar1.add(decisionTreeMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String[] parseListModelString2Array(ListModel<String> lista) {
        String[] convertida = new String[lista.getSize()];
        for (int i = 0; i < convertida.length; i++) {
            convertida[i] = lista.getElementAt(i);
        }
        return convertida;
    }

    public String[] parseListString2Array(ListModel<String> lista) {
        String[] convertida = new String[lista.getSize()];
        for (int i = 0; i < convertida.length; i++) {
            convertida[i] = lista.getElementAt(i);
        }
        return convertida;
    }

    private void fileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "TXT & CSV Files", "txt", "csv");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            limparResquiciosBasesAnteriores();
            checkGlyph.setEnabled(false);
            checkStarGlyph1.setEnabled(false);
            selectedFile = chooser.getSelectedFile();
            progressoBarra.setVisible(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            logger.info("Arquivo selecionado: " + selectedFile);
            //Instances of javax.swing.SwingWorker are not reusuable, so
            //we create new instances as needed.
            task = new Task();
            task.addPropertyChangeListener(this);
            task.execute();
        } else {
            JOptionPane.showMessageDialog(null, "The file type can not be read.", "Erro!", JOptionPane.ERROR_MESSAGE);
            logger.error("The file type can not be read. - Did it again!");
        }
    }//GEN-LAST:event_fileMenuItemActionPerformed

    private void atributo4GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo4GlyphItemStateChanged
        botaoGerarGlyphs.setEnabled(true);
    }//GEN-LAST:event_atributo4GlyphItemStateChanged

    private void atributo3GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo3GlyphItemStateChanged
        botaoGerarGlyphs.setEnabled(true);
    }//GEN-LAST:event_atributo3GlyphItemStateChanged

    private void atributo2GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo2GlyphItemStateChanged
        botaoGerarGlyphs.setEnabled(true);
    }//GEN-LAST:event_atributo2GlyphItemStateChanged

    private void atributo1GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo1GlyphItemStateChanged
        botaoGerarGlyphs.setEnabled(true);
    }//GEN-LAST:event_atributo1GlyphItemStateChanged

    private void botaoGerarGlyphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarGlyphsActionPerformed
        //acoes para configurar os glyphs
        variaveisVisuaisEscolhidas = parseListModelString2Array(varVisuaisEscolidasList.getModel());
        glyphPanel.setManipulador(manipulador);
        glyphPanel.setVariaveisVisuaisEscolhidas(variaveisVisuaisEscolhidas);

        //Acoes para desenhar os glyphs
        glyphPanel.setBounds(painelEsquerda.getBounds());
        glyphPanel.setUseDecisionTree(decisionTreeActivate.isSelected());
        ArrayList<Object> atributosEscolhidosGlyph = getAtributosEscolhidosGlyph();
        glyphPanel.setAtributosEscolhidos(atributosEscolhidosGlyph);
        glyphPanel.setVisible(true);
        glyphPanel.repaint();
        
        atualizarLegendaGlyphs(atributosEscolhidosGlyph);
    }//GEN-LAST:event_botaoGerarGlyphsActionPerformed

    private void checkGlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkGlyphActionPerformed
        if (checkGlyph.isSelected()) {
            Constantes.setShowGlyph(true);
            glyphPanel = new GlassPanel();
            glyphPanel.setTMView(view);

            varVisuaisList.setEnabled(true);

            layerPane.add(glyphPanel, new Integer(1), 0);
        } else {
            limparCacheGlyphs();
        }
    }//GEN-LAST:event_checkGlyphActionPerformed

    private void checkLegendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkLegendaActionPerformed
        if (checkLegenda.isSelected()) {
            Constantes.setShowLegenda(true);
            legendaComboBox.setEnabled(true);
        } else {
            Constantes.setShowLegenda(false);
            legendaComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_checkLegendaActionPerformed

    private void removerBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBotao_treemapActionPerformed
     List<Object> newListaVarVisuais = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < listaAtributos2.getModel().getSize(); i++) {
            String elementAt = listaAtributos2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(listaAtributos1.getSelectedValuesList());
        reloadListGUI(atributosEscolhidos.toArray(), listaAtributos2);
        listaAtributos2.setEnabled(true);

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = listaAtributos1.getModel();
        List<String> selectedValuesList = listaAtributos1.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaVarVisuais.add(modelOriginal.getElementAt(i));
            }
        }
        reloadListGUI(newListaVarVisuais.toArray(), listaAtributos1);
    }//GEN-LAST:event_removerBotao_treemapActionPerformed

    private void baixoBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baixoBotao_treemapActionPerformed
        List<String> novaLista = new ArrayList<>(colunasHierarquicasList2.getModel().getSize());
        for (int i = 0; i < colunasHierarquicasList2.getModel().getSize(); i++) {
            novaLista.add(colunasHierarquicasList2.getModel().getElementAt(i));
        }
        int[] selectedValuesList = colunasHierarquicasList2.getSelectedIndices();
        for (int i = 0; i < novaLista.size(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    String caraFrente = novaLista.get(i + 1);
                    String caraAtual = novaLista.get(i);
                    novaLista.add(i + 1, caraAtual);
                    novaLista.add(i, caraFrente);
                    novaLista.remove(i + 2);
                    novaLista.remove(i + 2);
                    break;
                }
            }
        }
        loadVariaveisEscolhidasList(novaLista.toArray(), colunasHierarquicasList2);
    }//GEN-LAST:event_baixoBotao_treemapActionPerformed

    private void cimaBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cimaBotao_treemapActionPerformed
        List<String> novaLista = new ArrayList<>();
        int[] selectedValuesList = colunasHierarquicasList2.getSelectedIndices();
        for (int i = 0; i < colunasHierarquicasList2.getModel().getSize(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    novaLista.add(i - 1, colunasHierarquicasList2.getModel().getElementAt(i));
                } else {
                    novaLista.add(colunasHierarquicasList2.getModel().getElementAt(i));
                }
            }
        }
        loadVariaveisEscolhidasList(novaLista.toArray(), colunasHierarquicasList2);
    }//GEN-LAST:event_cimaBotao_treemapActionPerformed

    private void colunasHierarquicasList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasHierarquicasList2ValueChanged
        if (colunasHierarquicasList2.getSelectedValuesList().size() >= 1) {
            removerBotao_treemap.setEnabled(true);
            if (colunasHierarquicasList2.getSelectedIndex() > 0) {
                cimaBotao_treemap.setEnabled(true);
            } else {
                cimaBotao_treemap.setEnabled(false);
            }
            if (colunasHierarquicasList2.getSelectedIndex() < colunasHierarquicasList2.getModel().getSize() - 1) {
                baixoBotao_treemap.setEnabled(true);
            } else {
                baixoBotao_treemap.setEnabled(false);
            }
        } else {
            removerBotao_treemap.setEnabled(false);
            cimaBotao_treemap.setEnabled(false);
            baixoBotao_treemap.setEnabled(false);
        }
    }//GEN-LAST:event_colunasHierarquicasList2ValueChanged

     private void reloadListGUI(Object[] objs, JList<String> jList) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        jList.setModel(model);
    }

    private void inserirBotao_treemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirBotao_treemapActionPerformed
        List<Object> newListaVarVisuais = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < listaAtributos2.getModel().getSize(); i++) {
            String elementAt = listaAtributos2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(listaAtributos1.getSelectedValuesList());
        reloadListGUI(atributosEscolhidos.toArray(), listaAtributos2);
        listaAtributos2.setEnabled(true);

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = listaAtributos1.getModel();
        List<String> selectedValuesList = listaAtributos1.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaVarVisuais.add(modelOriginal.getElementAt(i));
            }
        }
        reloadListGUI(newListaVarVisuais.toArray(), listaAtributos1);
    }//GEN-LAST:event_inserirBotao_treemapActionPerformed

    private void colunasHierarquicasListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasHierarquicasListValueChanged
        if (colunasHierarquicasList.getSelectedValuesList().size() >= 1) {
            inserirBotao_treemap.setEnabled(true);
        } else {
            inserirBotao_treemap.setEnabled(false);
        }
    }//GEN-LAST:event_colunasHierarquicasListValueChanged

    private void botaoGerarVisualizacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarVisualizacaoActionPerformed
        limparPainelEsquerda();
        itemTamanho = tamanhoTreemapComboBox.getSelectedItem().toString();
        itemLegenda = legendaComboBox.getSelectedItem().toString();
        itemCor = corTreemapComboBox.getSelectedItem().toString();
        String[] itensHierarquia = parseListString2Array(colunasHierarquicasList2.getModel());
        String[] itensDetalhes = parseListString2Array(colunasDetalhesList2.getModel());

        visualizationTreemap = new VisualizationsArea(painelEsquerda.getWidth(), painelEsquerda.getHeight(),
                manipulador, itemTamanho, itensHierarquia, itemLegenda, itemCor, itensDetalhes);

        painelEsquerda.add(layerPane);
        view = visualizationTreemap.getView();
        layerPane.setBounds(view.getBounds());
        layerPane.add(view, new Integer(0), 0);

        progressoBarra.setVisible(false);
        atualizarLegendaTreemap(itemCor);
        checkGlyph.setEnabled(true);
        checkStarGlyph1.setEnabled(true);
        botaoGerarStarGlyphs.setEnabled(true); 
        inserirVarVisualButton2.setEnabled(true);
        removerVarVisualButton2.setEnabled(true);
        limparCacheGlyphs();
    }//GEN-LAST:event_botaoGerarVisualizacaoActionPerformed

    private void colunasDetalhesList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasDetalhesList1ValueChanged
        if (colunasDetalhesList1.getSelectedValuesList().size() >= 1) {
            inserirBotao_detalhes.setEnabled(true);
        } else {
            inserirBotao_detalhes.setEnabled(false);
        }
    }//GEN-LAST:event_colunasDetalhesList1ValueChanged

    private void inserirBotao_detalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirBotao_detalhesActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < colunasDetalhesList2.getModel().getSize(); i++) {
            String elementAt = colunasDetalhesList2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(colunasDetalhesList1.getSelectedValuesList());
        atributosEscolhidos.sort(null);
        loadVariaveisEscolhidasList(atributosEscolhidos.toArray(), colunasDetalhesList2);
        colunasDetalhesList2.setEnabled(true);
//        botaoGerarVisualizacao.setEnabled(true);

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = colunasDetalhesList1.getModel();
        List<String> selectedValuesList = colunasDetalhesList1.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaAtribTreemap.add(modelOriginal.getElementAt(i));
            }
        }
        loadItensDetalhes(newListaAtribTreemap.toArray());
        updateDetailsButton.setEnabled(true);
    }//GEN-LAST:event_inserirBotao_detalhesActionPerformed

    private void removerBotao_detalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBotao_detalhesActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < colunasDetalhesList1.getModel().getSize(); i++) {
            String elementAt = colunasDetalhesList1.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(colunasDetalhesList2.getSelectedValuesList());
        atributos.sort(null);
        loadItensDetalhes(atributos.toArray());

        //remover o conteudo da lista de hierarquia treemap
        ListModel<String> modelGlyphs = colunasDetalhesList2.getModel();
        List<String> selectedValuesList = colunasDetalhesList2.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        loadVariaveisEscolhidasList(newListaAtribTreemap.toArray(), colunasDetalhesList2);

        if (colunasDetalhesList2.getModel().getSize() == 0) {
            colunasDetalhesList2.setEnabled(false);
        }
    }//GEN-LAST:event_removerBotao_detalhesActionPerformed

    private void colunasDetalhesList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colunasDetalhesList2ValueChanged
        if (colunasDetalhesList2.getSelectedValuesList().size() >= 1) {
            removerBotao_detalhes.setEnabled(true);
        } else {
            removerBotao_detalhes.setEnabled(false);
        }
    }//GEN-LAST:event_colunasDetalhesList2ValueChanged

    private void updateDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDetailsButtonActionPerformed
        String[] valoresEscolhidos = parseListString2Array(colunasDetalhesList2.getModel());
        visualizationTreemap.setColunasDetalhesDemanda(valoresEscolhidos);
        visualizationTreemap.updateDetalhesDemanda();

        botaoGerarVisualizacaoActionPerformed(evt);
    }//GEN-LAST:event_updateDetailsButtonActionPerformed

    private void decisionTreeActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decisionTreeActivateActionPerformed
        botaoGerarGlyphsActionPerformed(evt);
        if (decisionTreeActivate.isSelected()) {
            logger.info("Árvore de decisão avivada");
        }
    }//GEN-LAST:event_decisionTreeActivateActionPerformed

    private void varVisuaisListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_varVisuaisListValueChanged
        if (varVisuaisList.getSelectedValuesList().size() >= 1) {
            inserirVarVisualButton.setEnabled(true);
        } else {
            inserirVarVisualButton.setEnabled(false);
        }
    }//GEN-LAST:event_varVisuaisListValueChanged

 
    private void inserirVarVisualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirVarVisualButtonActionPerformed
        List<Object> newListaVarVisuais = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < varVisuaisEscolidasList.getModel().getSize(); i++) {
            String elementAt = varVisuaisEscolidasList.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(varVisuaisList.getSelectedValuesList());
//        atributosEscolhidos.sort(null);
        loadVariaveisEscolhidasList(atributosEscolhidos.toArray(), varVisuaisEscolidasList);
        varVisuaisEscolidasList.setEnabled(true);
//        botaoConfiVarVisuais.setEnabled(true);
        habilitarVarVisuaisUtilizadasGUI(varVisuaisList.getSelectedValuesList());

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = varVisuaisList.getModel();
        List<String> selectedValuesList = varVisuaisList.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaVarVisuais.add(modelOriginal.getElementAt(i));
            }
        }
        loadVarVisuais(newListaVarVisuais.toArray());
    }//GEN-LAST:event_inserirVarVisualButtonActionPerformed

    private void removerVarVisualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerVarVisualButtonActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < varVisuaisList.getModel().getSize(); i++) {
            String elementAt = varVisuaisList.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(varVisuaisEscolidasList.getSelectedValuesList());
//        atributos.sort(null);
        loadVarVisuais(atributos.toArray());
        desabilitarVarVisuaisUtilizadasGUI(varVisuaisEscolidasList.getSelectedValuesList());

        //remover o conteudo da lista de hierarquia treemap
        ListModel<String> modelGlyphs = varVisuaisEscolidasList.getModel();
        List<String> selectedValuesList = varVisuaisEscolidasList.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        loadVariaveisEscolhidasList(newListaAtribTreemap.toArray(), varVisuaisEscolidasList);

        if (varVisuaisEscolidasList.getModel().getSize() == 0) {
            varVisuaisEscolidasList.setEnabled(false);
        }
    }//GEN-LAST:event_removerVarVisualButtonActionPerformed

    private void varVisuaisEscolidasListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_varVisuaisEscolidasListValueChanged
        if (varVisuaisEscolidasList.getSelectedValuesList().size() >= 1) {
            removerVarVisualButton.setEnabled(true);
            if (varVisuaisEscolidasList.getSelectedIndex() > 0) {
                cimaButton.setEnabled(true);
            } else {
                cimaButton.setEnabled(false);
            }
            if (varVisuaisEscolidasList.getSelectedIndex() < varVisuaisEscolidasList.getModel().getSize() - 1) {
                baixoButton.setEnabled(true);
            } else {
                baixoButton.setEnabled(false);
            }
        } else {
            removerVarVisualButton.setEnabled(false);
            cimaButton.setEnabled(false);
            baixoButton.setEnabled(false);
        }
        if (varVisuaisEscolidasList.getModel().getSize() < 1) {
            botaoGerarGlyphs.setEnabled(false);
        }
    }//GEN-LAST:event_varVisuaisEscolidasListValueChanged

    private void cimaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cimaButtonActionPerformed
        List<String> novaLista = new ArrayList<>();
        int[] selectedValuesList = varVisuaisEscolidasList.getSelectedIndices();
        for (int i = 0; i < varVisuaisEscolidasList.getModel().getSize(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    novaLista.add(i - 1, varVisuaisEscolidasList.getModel().getElementAt(i));
                } else {
                    novaLista.add(varVisuaisEscolidasList.getModel().getElementAt(i));
                }
            }
        }
        loadVariaveisEscolhidasList(novaLista.toArray(), varVisuaisEscolidasList);
    }//GEN-LAST:event_cimaButtonActionPerformed

    private void baixoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baixoButtonActionPerformed
        List<String> novaLista = new ArrayList<>(varVisuaisEscolidasList.getModel().getSize());
        for (int i = 0; i < varVisuaisEscolidasList.getModel().getSize(); i++) {
            novaLista.add(varVisuaisEscolidasList.getModel().getElementAt(i));
        }
        int[] selectedValuesList = varVisuaisEscolidasList.getSelectedIndices();
        for (int i = 0; i < novaLista.size(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    String caraFrente = novaLista.get(i + 1);
                    String caraAtual = novaLista.get(i);
                    novaLista.add(i + 1, caraAtual);
                    novaLista.add(i, caraFrente);
                    novaLista.remove(i + 2);
                    novaLista.remove(i + 2);
                    break;
                }
            }
        }
        loadVariaveisEscolhidasList(novaLista.toArray(), varVisuaisEscolidasList);
    }//GEN-LAST:event_baixoButtonActionPerformed

    private void atributo5GlyphItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_atributo5GlyphItemStateChanged
        botaoGerarGlyphs.setEnabled(true);
        
    }//GEN-LAST:event_atributo5GlyphItemStateChanged

  
    private void atributo1GlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atributo1GlyphActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo1GlyphActionPerformed

    private void atributo3GlyphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atributo3GlyphActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atributo3GlyphActionPerformed

    private void corTreemapComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_corTreemapComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_corTreemapComboBoxActionPerformed

    private void checkStarGlyph1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkStarGlyph1ActionPerformed
         Constantes.setShowGlyph(true);
            glyphPanel = new GlassPanel();
            glyphPanel.setTMView(view);

            varVisuaisList.setEnabled(true);

            layerPane.add(glyphPanel, new Integer(1), 0);
    }//GEN-LAST:event_checkStarGlyph1ActionPerformed


    
    private void removerVarVisualButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerVarVisualButton2ActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < listaAtributos1.getModel().getSize(); i++) {
            String elementAt = listaAtributos1.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(listaAtributos2.getSelectedValuesList());
        reloadListGUI(atributos.toArray(), listaAtributos1);

        //remover o conteudo da lista de hierarquia treemap
        ListModel<String> modelGlyphs = listaAtributos2.getModel();
        List<String> selectedValuesList = listaAtributos2.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        reloadListGUI(newListaAtribTreemap.toArray(), listaAtributos2);

        if (listaAtributos2.getModel().getSize() == 0) {
            listaAtributos2.setEnabled(false);
        }
    }//GEN-LAST:event_removerVarVisualButton2ActionPerformed

    private void inserirVarVisualButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirVarVisualButton2ActionPerformed
        List<Object> newListaVarVisuais = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < listaAtributos2.getModel().getSize(); i++) {
            String elementAt = listaAtributos2.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(listaAtributos1.getSelectedValuesList());
        reloadListGUI(atributosEscolhidos.toArray(), listaAtributos2);
        listaAtributos2.setEnabled(true);

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = listaAtributos1.getModel();
        List<String> selectedValuesList = listaAtributos1.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaVarVisuais.add(modelOriginal.getElementAt(i));
            }
        }
        reloadListGUI(newListaVarVisuais.toArray(), listaAtributos1);
    
    }//GEN-LAST:event_inserirVarVisualButton2ActionPerformed

    private void listaAtributos2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaAtributos2ValueChanged
        if (listaAtributos2.getSelectedValuesList().size() >= 1) {
            removerVarVisualButton.setEnabled(true);
            if (listaAtributos2.getSelectedIndex() > 0) {
                cimaButton.setEnabled(true);
            } else {
                cimaButton.setEnabled(false);
            }
            if (listaAtributos2.getSelectedIndex() < listaAtributos2.getModel().getSize() - 1) {
                baixoButton.setEnabled(true);
            } else {
                baixoButton.setEnabled(false);
            }
        } else {
            removerVarVisualButton.setEnabled(false);
            cimaButton.setEnabled(false);
            baixoButton.setEnabled(false);
        }
        //        if (listaAtributos2.getModel().getSize() < 1) {
            //            botaoGerarGlyphs.setEnabled(false);
            //        }else{
            //            botaoGerarGlyphs.setEnabled(true);
            //        }
    }//GEN-LAST:event_listaAtributos2ValueChanged

      private void prepararLegendaStarGlyph(List<String> itensVariaveisStarGlyph) {
        painelLegenda.setEditable(true);
        painelLegenda.setText("");
        for (int i = 0; i < itensVariaveisStarGlyph.size(); i++) {
            appendToPane(painelLegenda, itensVariaveisStarGlyph.get(i) +"\n", Color.decode(Constantes.getCor()[i]));
        }
        painelLegenda.setEditable(false);
    }
      
      
    private void botaoGerarStarGlyphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarStarGlyphsActionPerformed
         //acoes para configurar os glyphs                
        variaveisVisuaisEscolhidas = parseListModelString2Array(listaAtributos2.getModel());
        glyphPanel.setVariaveisVisuaisEscolhidas(variaveisVisuaisEscolhidas);
        glyphPanel.setManipulador(manipulador);
        String[] minharola = {"star"};
        ArrayList<Object> star = getAtributosContinouos();
        glyphPanel.setVariaveisVisuaisEscolhidas(minharola);

        //Acoes para desenhar os glyphs
//        glyphPanel.setBounds(painelEsquerda.getBounds());
//        glyphPanel.setUseDecisionTree(decisionTreeActivate.isSelected());
         ArrayList<Object> atributosEscolhidosGlyph = getAtributosEscolhidosGlyph();
     
         glyphPanel.setAtributosEscolhidos(star);
         glyphPanel.setVisible(true);
         glyphPanel.repaint();
        
//        atualizarLegendaGlyphs(atributosEscolhidosGlyph);
        
        
//        manipulador = new ManipuladorArquivo();
//        manipulador.getExtensionFile("carros_teste56.txt");
//        manipulador.lerArquivo(new File("C:\\Users\\Elvis (LABVIS)\\Documents\\src_StarGlyph\\StarGlyph\\src\\glyph\\carros_teste56.txt"));
//        
//        manipulador.montarColunas(manipulador.getCabecalho(), manipulador.getTipos());
//        //manipulador.carregarItensGrid();
//        for (int i = 0; i < manipulador.getColunas().length; i++) {
//            Coluna c = manipulador.getColunas()[i];
//            c.configurarDescricao(manipulador.getDadosColuna(manipulador.getCabecalho()[i]));
//        }
//        
//        //atributosBaseEscolhidos = parseListModelString2Array(listaAtributos2.getModel());
//        //atributosBaseEscolhidos = parseListModelString2Array(listaAtributos2.getModel());
//        //gridPanel.setScala(1.5);
//        //gridPanel.setGridSize(7, 8);
//        //gridPanel.setItensGrid(manipulador.getItens());
//        //gridPanel.setAtributosBaseEscolhidos(atributosBaseEscolhidos);
//        //gridPanel.loadMatrizGlyphs();
//
//        //gridPanel.setCofigItensGrid();
//        //prepararLegendaStarGlyph(Arrays.asList(atributosBaseEscolhidos));
//        //gridPanel.repaint();
//        int[] selectedValuesList = listaAtributos2.getSelectedIndices();
//        System.out.println((listaAtributos2.getSelectedIndices().toString()));
//        System.out.println("click star");
    }//GEN-LAST:event_botaoGerarStarGlyphsActionPerformed

    private void cimaButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cimaButton2ActionPerformed
        List<String> novaLista = new ArrayList<>();
        int[] selectedValuesList = listaAtributos2.getSelectedIndices();
        for (int i = 0; i < listaAtributos2.getModel().getSize(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    novaLista.add(i - 1, listaAtributos2.getModel().getElementAt(i));
                } else {
                    novaLista.add(listaAtributos2.getModel().getElementAt(i));
                }
            }
        }
        reloadListGUI(novaLista.toArray(), listaAtributos2);
    }//GEN-LAST:event_cimaButton2ActionPerformed

    private void baixoButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baixoButton2ActionPerformed
        List<String> novaLista = new ArrayList<>(listaAtributos2.getModel().getSize());
        for (int i = 0; i < listaAtributos2.getModel().getSize(); i++) {
            novaLista.add(listaAtributos2.getModel().getElementAt(i));
        }
        int[] selectedValuesList = listaAtributos2.getSelectedIndices();
        for (int i = 0; i < novaLista.size(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    String caraFrente = novaLista.get(i + 1);
                    String caraAtual = novaLista.get(i);
                    novaLista.add(i + 1, caraAtual);
                    novaLista.add(i, caraFrente);
                    novaLista.remove(i + 2);
                    novaLista.remove(i + 2);
                    break;
                }
            }
        }
        reloadListGUI(novaLista.toArray(), listaAtributos2);
    }//GEN-LAST:event_baixoButton2ActionPerformed

    private void listaAtributos1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaAtributos1ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_listaAtributos1ValueChanged

    private ArrayList<Object> getAtributosEscolhidosGlyph() {
        ArrayList<Object> atributosEscolhidosGlyph = new ArrayList<>();
        atributosEscolhidosGlyph.add(atributo1Glyph.getSelectedItem());
        atributosEscolhidosGlyph.add(atributo2Glyph.getSelectedItem());
        atributosEscolhidosGlyph.add(atributo3Glyph.getSelectedItem());
        atributosEscolhidosGlyph.add(atributo4Glyph.getSelectedItem());
        atributosEscolhidosGlyph.add(atributo5Glyph.getSelectedItem());
         
        return atributosEscolhidosGlyph;
    }
    
    private ArrayList<Object> getAtributosContinouos() {
        ArrayList<Object> atributosEscolhidosGlyph = new ArrayList<>();
        atributosEscolhidosGlyph.add(listaAtributos2);
        System.out.println(": "+listaAtributos2);
        return atributosEscolhidosGlyph;
    }
      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                frame = new Main();
                frame.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel abaConfigGlyphs;
    private javax.swing.JPanel abaDetalhes;
    private javax.swing.JPanel abaFiltros;
    private javax.swing.JPanel abaStarGlyphs;
    private javax.swing.JPanel abaTreemap;
    private javax.swing.JComboBox<String> atributo1Glyph;
    private javax.swing.JComboBox<String> atributo2Glyph;
    private javax.swing.JComboBox<String> atributo3Glyph;
    private javax.swing.JComboBox<String> atributo4Glyph;
    private javax.swing.JComboBox<String> atributo5Glyph;
    private javax.swing.JButton baixoBotao_treemap;
    private javax.swing.JButton baixoButton;
    private javax.swing.JButton baixoButton2;
    private javax.swing.JButton botaoGerarGlyphs;
    private javax.swing.JButton botaoGerarStarGlyphs;
    private javax.swing.JButton botaoGerarVisualizacao;
    private javax.swing.JCheckBox checkGlyph;
    private javax.swing.JCheckBox checkLegenda;
    private javax.swing.JCheckBox checkStarGlyph1;
    private javax.swing.JButton cimaBotao_treemap;
    private javax.swing.JButton cimaButton;
    private javax.swing.JButton cimaButton2;
    private javax.swing.JList<String> colunasDetalhesList1;
    private javax.swing.JList<String> colunasDetalhesList2;
    private javax.swing.JList<String> colunasHierarquicasList;
    private javax.swing.JList<String> colunasHierarquicasList2;
    private javax.swing.JComboBox<String> corTreemapComboBox;
    private javax.swing.JCheckBoxMenuItem decisionTreeActivate;
    private javax.swing.JMenu decisionTreeMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileMenuItem;
    private javax.swing.JButton inserirBotao_detalhes;
    private javax.swing.JButton inserirBotao_treemap;
    private javax.swing.JButton inserirVarVisualButton;
    private javax.swing.JButton inserirVarVisualButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JScrollPane legendaBarraRolage;
    private javax.swing.JComboBox<String> legendaComboBox;
    private javax.swing.JList<String> listaAtributos1;
    private javax.swing.JList<String> listaAtributos2;
    private javax.swing.JPanel painelDireita;
    private javax.swing.JPanel painelEsquerda;
    private javax.swing.JTextPane painelLegenda;
    private javax.swing.JPanel painelLegendaVis;
    private javax.swing.JProgressBar progressoBarra;
    private javax.swing.JButton removerBotao_detalhes;
    private javax.swing.JButton removerBotao_treemap;
    private javax.swing.JButton removerVarVisualButton;
    private javax.swing.JButton removerVarVisualButton2;
    private javax.swing.JComboBox<String> tamanhoTreemapComboBox;
    private javax.swing.JButton updateDetailsButton;
    private javax.swing.JList<String> varVisuaisEscolidasList;
    private javax.swing.JList<String> varVisuaisList;
    // End of variables declaration//GEN-END:variables
    static Main frame;
    private JLayeredPane layerPane;
    private GlassPanel glyphPanel;
    private LegendaVisualizacao legendaVisualizacao;
    private String itemTamanho;
    private String itemLegenda;
    private String itemCor;
    private TMView view;
    private VisualizationsArea visualizationTreemap;
    private String[] variaveisVisuaisEscolhidas;

    private ManipuladorArquivo manipulador;
    private File selectedFile;
    private Task task;

    private void atualizarLegendaGlyphs(ArrayList<Object> atributosEscolhidosGlyph) {
        painelLegendaVis.removeAll();
        atualizarLegendaTreemap(itemCor);
        legendaVisualizacao.setAtributosGlyphs(atributosEscolhidosGlyph);
        for (int i = 0; i < atributosEscolhidosGlyph.size(); i++) {
            if (!atributosEscolhidosGlyph.get(i).equals("---")) {
                JPanel painelDimensao = legendaVisualizacao.addLegendaDimensao(i);
                painelLegendaVis.setLayout(new BoxLayout(painelLegendaVis, BoxLayout.Y_AXIS));
                painelLegendaVis.add(painelDimensao);
            }
            painelLegendaVis.revalidate();
        }
    }

    private void atualizarLegendaTreemap(String itemCor) {
        painelLegendaVis.removeAll();
        if (!itemCor.equals("---")) {
            JPanel painelDimensao = legendaVisualizacao.addLegendaCorTreemap(itemCor);
            painelLegendaVis.add(painelDimensao);
        }
    }

    private void limparCacheGlyphs() {
        Constantes.setShowGlyph(false);
        botaoGerarGlyphs.setEnabled(false);
        if (glyphPanel != null) {
            glyphPanel.setVisible(false);
            layerPane.remove(glyphPanel);
            glyphPanel = null;

            varVisuaisList.setEnabled(false);
            varVisuaisEscolidasList.setEnabled(false);
            Object[] vazio = {};
            DefaultComboBoxModel emptyList = new DefaultComboBoxModel(vazio);
            varVisuaisEscolidasList.setModel(emptyList);
            varVisuaisList.setModel(emptyList);
            Object[] newList = new Object[5];
            newList[0] = "Texture";
            newList[1] = "Color";
            newList[2] = "Shape";
            newList[3] = "Letter";
            newList[4] = "Number";
            newList[5] = "Star";
            DefaultComboBoxModel model = new DefaultComboBoxModel(newList);
            varVisuaisList.setModel(model);

            atributo1Glyph.setEnabled(false);
            atributo2Glyph.setEnabled(false);
            atributo3Glyph.setEnabled(false);
            atributo4Glyph.setEnabled(false);
            atributo5Glyph.setEnabled(false);
          

            painelLegendaVis.removeAll();
            painelLegendaVis.repaint();
        }
        if (checkGlyph.isSelected()) {
            checkGlyph.setSelected(false);
            checkStarGlyph1.setSelected(false);
        }
    }

    private void loadAtributosDetalhes() {
        List<String> itens = new ArrayList<>();
        List<String> itens2 = new ArrayList<>();
        for (String cabecalho : manipulador.getCabecalho()) {
            itens.add(cabecalho);
        }
        for (int i = 0; i < 3; i++) {
            String itemRemovido = itens.remove(0);
            itens2.add(itemRemovido);
        }
        itens.remove(itens.size() - 1);
        DefaultComboBoxModel model = new DefaultComboBoxModel(itens.toArray());
        DefaultComboBoxModel model2 = new DefaultComboBoxModel(itens2.toArray());

        colunasDetalhesList1.setModel(model);
        colunasDetalhesList2.setModel(model2);
        colunasDetalhesList1.setEnabled(true);
        colunasDetalhesList2.setEnabled(true);
        
    }

    private void limparResquiciosBasesAnteriores() {
        limparPainelEsquerda();
        limparCacheGlyphs();
        painelLegendaVis.removeAll();
        Object[] vazio = {};
        DefaultComboBoxModel model = new DefaultComboBoxModel(vazio);
        colunasHierarquicasList2.setModel(model);
        listaAtributos2.setModel(model);       

    }
    


    private void habilitarVarVisuaisUtilizadasGUI(List<String> variaveis) {
        for (String var : variaveis) {
            switch (var) {
                case "Texture":
                    atributo1Glyph.setEnabled(true);
                    break;
                case "Color":
                    atributo2Glyph.setEnabled(true);
                    break;
                case "Shape":
                    atributo3Glyph.setEnabled(true);
                    break;
                case "Letter":
                    atributo4Glyph.setEnabled(true);
                    break;
                case "Number":
                    atributo5Glyph.setEnabled(true);
                    break;
            }
        }
    }

    private void desabilitarVarVisuaisUtilizadasGUI(List<String> variaveis) {
        for (String var : variaveis) {
            switch (var) {
                case "Texture":
                    atributo1Glyph.setEnabled(false);
                    atributo1Glyph.setSelectedIndex(0);
                    break;
                case "Color":
                    atributo2Glyph.setEnabled(false);
                    atributo2Glyph.setSelectedIndex(0);
                    break;
                case "Shape":
                    atributo3Glyph.setEnabled(false);
                    atributo3Glyph.setSelectedIndex(0);
                    break;
                case "Letter":
                    atributo4Glyph.setEnabled(false);
                    atributo4Glyph.setSelectedIndex(0);
                    break;
                case "Number":
                    atributo5Glyph.setEnabled(false);
                    atributo5Glyph.setSelectedIndex(0);  
            }
        }
    }

    class Task extends SwingWorker<Void, Void> {

        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() {
            int progress = 0;
            //Initialize progress property.
            setProgress(0);
            int ordem = 0;
            while (progress < 100) {
                //Sleep for up to one second.
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ignore) {
                    ignore.printStackTrace();
                }
                //Make progress.     
                ordem++;
                progress = executaTarefas(ordem, progress);
                setProgress(Math.min(progress, 100));
            }
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            setCursor(null); //turn off the wait cursor
        }
    }

    private int executaTarefas(int ordem, int porcentagem) {
        int tarefas = 10;
        switch (ordem) {
            case 1:
                logger.info("Leitura do arquivo.");
                manipulador = new ManipuladorArquivo();
                manipulador.lerArquivo(selectedFile);
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Tratando arquivo: " + porcentagem + "%");
                break;
            case 2:
                try {
                    logger.info("Montando Objetos coluna.");
                    manipulador.montarColunas(manipulador.getCabecalho(), manipulador.getTipos());
                } catch (Exception e) {
                    logger.error("Erro montar objetos COLUNA. \n", e);
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Montando colunas: " + porcentagem + "%");
                break;
            case 3:
                try {
                    logger.info("Carregando itens no treemap e define um GlyphConcreto a esse item.");
                    manipulador.carregarItensTreemap();
                } catch (Throwable e) {
                    logger.error("Erro ao criar itens no treemap. \n", e);
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando itens no TreeMap: " + porcentagem + "%");
                break;
            case 4:
                try {
                    logger.info("Definindo a descrição das colunas.");
                    for (int i = 0; i < manipulador.getColunas().length; i++) {
                        Coluna c = manipulador.getColunas()[i];
                        if (c != null) {
                            c.configurarDescricao(manipulador.getDadosColuna(manipulador.getCabecalho()[i]));
                        } else {
                            throw new Exception();
                        }
                    }
                } catch (Exception e) {
                    logger.error("Erro ao definir a descrição das colunas. \n", e);
                    JOptionPane.showMessageDialog(null, "Ocorreu um erro na leitura do seu arquivo. \nPor favor,"
                            + "Verifique se seu arquivo está configurado corretamente \n"
                            + "e tente novamente.", "Há um problema em seu arquivo!.", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    break;
                }
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Definindo a descrição das colunas: " + porcentagem + "%");
                break;
            case 5:
                logger.info("Preparando lista tamanho para o treemap.");
                loadItensTamanhoTreemap();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando lista tamanho: " + porcentagem + "%");
                break;
            case 6:
                logger.info("Preparando lista legenda para o treemap.");
                loadItensLegendaTreemap();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Preparando lista legenda: " + porcentagem + "%");
                break;
            case 7:
                logger.info("Preparando variáveis glyphs.");
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_1, true), atributo1Glyph);
                List<String> itens = new ArrayList<>();
                itens.add("---");
                for (String cabecalho : manipulador.getCabecalho()) {
                    itens.add(cabecalho);
                }
                loadVariaveisGlyph(itens.toArray(), atributo2Glyph);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_3, true), atributo3Glyph);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_4, true), atributo4Glyph);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_5, true), atributo5Glyph);
  


                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis glyph: " + porcentagem + "%");
                break;
            case 8:
                logger.info("Preparando variáveis hierarquia para o treemap.");
                loadItensHierarquiaTreemap(getColunasCategoricas().toArray());
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis hierarquia Treemap: " + porcentagem + "%");
                break;
            case 9:
                logger.info("Preparando variáveis Cores para o treemap.");
//                loadItensCoresTreemap(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_2, false));
                List<String> coresTreemap = new ArrayList<>();
                coresTreemap.add("---");
                for (String cabecalho : manipulador.getCabecalho()) {
                    coresTreemap.add(cabecalho);
                }
                loadItensCoresTreemap(coresTreemap.toArray());
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis cores Treemap: " + porcentagem + "%");
                break;
            case 10:
                logger.info("Preparando variáveis para Detalhes sob Demanda para o treemap.");
                loadAtributosDetalhes();
                porcentagem = (ordem * 100) / tarefas;
                progressoBarra.setToolTipText("Carregando variáveis para Detalhes sob Demanda: " + porcentagem + "%");
                break;
            default:
                throw new AssertionError();
        }
        return porcentagem;
    }

    private void limparPainelEsquerda() {
        painelEsquerda.removeAll();
        painelEsquerda.repaint();
    }

    private void loadItensTamanhoTreemap() {
        List<String> itens = new ArrayList<>();
        for (String cabecalho : manipulador.getCabecalho()) {
            String tipo = manipulador.getMapaCabecalho().get(cabecalho);
            if (tipo.equalsIgnoreCase(Metadados.TipoDados.Integer.name())
                    || tipo.equalsIgnoreCase(Metadados.TipoDados.Double.name())) {
                itens.add(cabecalho);
            }
        }
        atualizarComboBox(tamanhoTreemapComboBox, itens);
        tamanhoTreemapComboBox.setEnabled(true);
    }

    private void loadItensLegendaTreemap() {
        List<String> itens = new ArrayList<>();
        itens.addAll(Arrays.asList(manipulador.getCabecalho()));
        itens.remove(manipulador.getCabecalho().length - 1);
        atualizarComboBox(legendaComboBox, itens);
        botaoGerarVisualizacao.setEnabled(true);
    }

    private void loadItensHierarquiaTreemap(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        colunasHierarquicasList.setModel(model);
        colunasHierarquicasList.setEnabled(true);
        listaAtributos1.setModel(model);
        listaAtributos1.setEnabled(true);
     
    }

    private void loadItensDetalhes(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        colunasDetalhesList1.setModel(model);
        colunasDetalhesList1.setEnabled(true);
    }
    
    private void loadItensContinuos(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        colunasDetalhesList1.setModel(model);
        colunasDetalhesList1.setEnabled(true);
    }
    
    private void loadItensCoresTreemap(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        corTreemapComboBox.setModel(model);
        corTreemapComboBox.setEnabled(true);
    }

    /**
     * Metodo usado para carregar os atributos categoricos nas listas de glyphs
     *
     * @param nivel
     * @return um array contendo os atributos que serao exibidos nas listas dos
     * glyphs
     */
    private Object[] getListaAtributosCategoricos(Constantes.NivelGlyph nivel, boolean glyph) {
        ArrayList<String> list = new ArrayList<>();
        list.add(0, "---");
        list.addAll(analisarAtributosCategoricos(nivel, glyph));
        return list.toArray();
    }

    private List<String> analisarQuantAtributosCategoricos(List<String> list, Object[] obj) {
        for (String colunasCategorica : getColunasCategoricas()) {
            Coluna c = ManipuladorArquivo.getColuna(colunasCategorica);
            int quantDadosDistintos = c.getDadosDistintos().size();
            if (quantDadosDistintos <= obj.length) {
                list.add(c.getName());
            }
        }
        return list;
    }

    private List<String> analisarAtributosCategoricos(Constantes.NivelGlyph nivel, boolean glyph) {
        ArrayList<String> list = new ArrayList<>();
        switch (nivel) {
            case NIVEL_1:
                analisarQuantAtributosCategoricos(list, Constantes.TIPO_TEXTURA);
                break;
            case NIVEL_2:
                if (glyph) {
                    analisarQuantAtributosCategoricos(list, Constantes.getCorGlyphs());
                } else {
                    analisarQuantAtributosCategoricos(list, Constantes.getCor());
                }
                break;
            case NIVEL_3:
                GeometryFactory.FORMAS.GLYPH_FORMAS[] formas = new GeometryFactory.FORMAS.GLYPH_FORMAS[GeometryFactory.FORMAS.GLYPH_FORMAS.values().length - 1];
                for (int i = 0; i < formas.length; i++) {
                    formas[i] = GeometryFactory.FORMAS.GLYPH_FORMAS.values()[i];
                }
                analisarQuantAtributosCategoricos(list, formas);
                break;
            case NIVEL_4:
                analisarQuantAtributosCategoricos(list, Constantes.LETRAS_ALFABETO);
                break;
            case NIVEL_5:
                analisarQuantAtributosCategoricos(list, Constantes.NUMEROS);
                break;
            default:
                System.err.println("Nao foi carregar atributos para a dimensão.");
        }
        return list;
    }

    private List<String> getColunasCategoricas() {
        List<String> list = new ArrayList<>();
        for (int i = 0; i < manipulador.getColunas().length - 1; i++) {
            Coluna c = manipulador.getColunas()[i];
            if (c.getDescription().equals(Metadados.Descricao.CATEGORICAL)) {
                list.add(c.getName());
            }
        }
        return list;
    }

    private void atualizarComboBox(JComboBox comboBox, List<String> itens) {
        Object[] items = itens.toArray();
        DefaultComboBoxModel model = new DefaultComboBoxModel(items);
        comboBox.setModel(model);
    }

    private void loadVariaveisGlyph(Object[] objs, JComboBox<String> atributo) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        atributo.setModel(model);
    }

    private void loadVariaveisEscolhidasGlyph(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
//        variaveisGlyphList2.setModel(model);
    }

    private void loadVariaveisEscolhidasList(Object[] objs, JList<String> jList) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        jList.setModel(model);
    }

    private void loadVarVisuais(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        varVisuaisList.setModel(model);
        varVisuaisList.setEnabled(true);
    }

//    private void loadVariaveisStarGlyph() {
//        List<String> itens = new ArrayList<>();
//        for (String cabecalho : manipulador.getCabecalho()) {
//            String tipo = manipulador.getMapaCabecalho().get(cabecalho);
//            if (tipo.equalsIgnoreCase(Metadados.TipoDados.Integer.name())
//                    || tipo.equalsIgnoreCase(Metadados.TipoDados.Double.name())) {
//                itens.add(cabecalho);
//            }
//        }
//        Object[] items = itens.toArray();
//        DefaultComboBoxModel model = new DefaultComboBoxModel(items);
//        variaveisGlyphList.setModel(model);
//    }
    private void appendToPane(JTextPane tp, String msg, Color c) {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
    }

//    private void prepararLegendaStarGlyph(List<String> itensVariaveisStarGlyph) {
//        painelLegenda.setEditable(true);
//        painelLegenda.setText("");
//        for (int i = 0; i < itensVariaveisStarGlyph.size(); i++) {
//            appendToPane(painelLegenda, itensVariaveisStarGlyph.get(i) + "\n", Color.decode(Constantes.getCor()[i]));
//        }
//        painelLegenda.setEditable(false);
//    }
    /**
     * Invoked when task's progress property changes.
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (Constantes.PROGRESS == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            progressoBarra.setValue(progress);
        }
    }
}
